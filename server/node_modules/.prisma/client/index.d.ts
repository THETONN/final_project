
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model users
 * 
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>
/**
 * Model choice
 * 
 */
export type choice = $Result.DefaultSelection<Prisma.$choicePayload>
/**
 * Model feedback_question
 * 
 */
export type feedback_question = $Result.DefaultSelection<Prisma.$feedback_questionPayload>
/**
 * Model mgroup
 * 
 */
export type mgroup = $Result.DefaultSelection<Prisma.$mgroupPayload>
/**
 * Model questionnaire
 * 
 */
export type questionnaire = $Result.DefaultSelection<Prisma.$questionnairePayload>
/**
 * Model recommendation
 * 
 */
export type recommendation = $Result.DefaultSelection<Prisma.$recommendationPayload>
/**
 * Model responses
 * 
 */
export type responses = $Result.DefaultSelection<Prisma.$responsesPayload>
/**
 * Model trip
 * 
 */
export type trip = $Result.DefaultSelection<Prisma.$tripPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  ADMIN: 'ADMIN',
  USER: 'USER'
};

export type Role = (typeof Role)[keyof typeof Role]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs>;

  /**
   * `prisma.choice`: Exposes CRUD operations for the **choice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Choices
    * const choices = await prisma.choice.findMany()
    * ```
    */
  get choice(): Prisma.choiceDelegate<ExtArgs>;

  /**
   * `prisma.feedback_question`: Exposes CRUD operations for the **feedback_question** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Feedback_questions
    * const feedback_questions = await prisma.feedback_question.findMany()
    * ```
    */
  get feedback_question(): Prisma.feedback_questionDelegate<ExtArgs>;

  /**
   * `prisma.mgroup`: Exposes CRUD operations for the **mgroup** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Mgroups
    * const mgroups = await prisma.mgroup.findMany()
    * ```
    */
  get mgroup(): Prisma.mgroupDelegate<ExtArgs>;

  /**
   * `prisma.questionnaire`: Exposes CRUD operations for the **questionnaire** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Questionnaires
    * const questionnaires = await prisma.questionnaire.findMany()
    * ```
    */
  get questionnaire(): Prisma.questionnaireDelegate<ExtArgs>;

  /**
   * `prisma.recommendation`: Exposes CRUD operations for the **recommendation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Recommendations
    * const recommendations = await prisma.recommendation.findMany()
    * ```
    */
  get recommendation(): Prisma.recommendationDelegate<ExtArgs>;

  /**
   * `prisma.responses`: Exposes CRUD operations for the **responses** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Responses
    * const responses = await prisma.responses.findMany()
    * ```
    */
  get responses(): Prisma.responsesDelegate<ExtArgs>;

  /**
   * `prisma.trip`: Exposes CRUD operations for the **trip** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Trips
    * const trips = await prisma.trip.findMany()
    * ```
    */
  get trip(): Prisma.tripDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.6.0
   * Query Engine version: e95e739751f42d8ca026f6b910f5a2dc5adeaeee
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    users: 'users',
    choice: 'choice',
    feedback_question: 'feedback_question',
    mgroup: 'mgroup',
    questionnaire: 'questionnaire',
    recommendation: 'recommendation',
    responses: 'responses',
    trip: 'trip'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'users' | 'choice' | 'feedback_question' | 'mgroup' | 'questionnaire' | 'recommendation' | 'responses' | 'trip'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>,
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      choice: {
        payload: Prisma.$choicePayload<ExtArgs>
        fields: Prisma.choiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.choiceFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$choicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.choiceFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$choicePayload>
          }
          findFirst: {
            args: Prisma.choiceFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$choicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.choiceFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$choicePayload>
          }
          findMany: {
            args: Prisma.choiceFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$choicePayload>[]
          }
          create: {
            args: Prisma.choiceCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$choicePayload>
          }
          createMany: {
            args: Prisma.choiceCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.choiceDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$choicePayload>
          }
          update: {
            args: Prisma.choiceUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$choicePayload>
          }
          deleteMany: {
            args: Prisma.choiceDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.choiceUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.choiceUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$choicePayload>
          }
          aggregate: {
            args: Prisma.ChoiceAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateChoice>
          }
          groupBy: {
            args: Prisma.choiceGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ChoiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.choiceCountArgs<ExtArgs>,
            result: $Utils.Optional<ChoiceCountAggregateOutputType> | number
          }
        }
      }
      feedback_question: {
        payload: Prisma.$feedback_questionPayload<ExtArgs>
        fields: Prisma.feedback_questionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.feedback_questionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$feedback_questionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.feedback_questionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$feedback_questionPayload>
          }
          findFirst: {
            args: Prisma.feedback_questionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$feedback_questionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.feedback_questionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$feedback_questionPayload>
          }
          findMany: {
            args: Prisma.feedback_questionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$feedback_questionPayload>[]
          }
          create: {
            args: Prisma.feedback_questionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$feedback_questionPayload>
          }
          createMany: {
            args: Prisma.feedback_questionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.feedback_questionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$feedback_questionPayload>
          }
          update: {
            args: Prisma.feedback_questionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$feedback_questionPayload>
          }
          deleteMany: {
            args: Prisma.feedback_questionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.feedback_questionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.feedback_questionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$feedback_questionPayload>
          }
          aggregate: {
            args: Prisma.Feedback_questionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFeedback_question>
          }
          groupBy: {
            args: Prisma.feedback_questionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Feedback_questionGroupByOutputType>[]
          }
          count: {
            args: Prisma.feedback_questionCountArgs<ExtArgs>,
            result: $Utils.Optional<Feedback_questionCountAggregateOutputType> | number
          }
        }
      }
      mgroup: {
        payload: Prisma.$mgroupPayload<ExtArgs>
        fields: Prisma.mgroupFieldRefs
        operations: {
          findUnique: {
            args: Prisma.mgroupFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$mgroupPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.mgroupFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$mgroupPayload>
          }
          findFirst: {
            args: Prisma.mgroupFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$mgroupPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.mgroupFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$mgroupPayload>
          }
          findMany: {
            args: Prisma.mgroupFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$mgroupPayload>[]
          }
          create: {
            args: Prisma.mgroupCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$mgroupPayload>
          }
          createMany: {
            args: Prisma.mgroupCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.mgroupDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$mgroupPayload>
          }
          update: {
            args: Prisma.mgroupUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$mgroupPayload>
          }
          deleteMany: {
            args: Prisma.mgroupDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.mgroupUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.mgroupUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$mgroupPayload>
          }
          aggregate: {
            args: Prisma.MgroupAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMgroup>
          }
          groupBy: {
            args: Prisma.mgroupGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MgroupGroupByOutputType>[]
          }
          count: {
            args: Prisma.mgroupCountArgs<ExtArgs>,
            result: $Utils.Optional<MgroupCountAggregateOutputType> | number
          }
        }
      }
      questionnaire: {
        payload: Prisma.$questionnairePayload<ExtArgs>
        fields: Prisma.questionnaireFieldRefs
        operations: {
          findUnique: {
            args: Prisma.questionnaireFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionnairePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.questionnaireFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionnairePayload>
          }
          findFirst: {
            args: Prisma.questionnaireFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionnairePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.questionnaireFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionnairePayload>
          }
          findMany: {
            args: Prisma.questionnaireFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionnairePayload>[]
          }
          create: {
            args: Prisma.questionnaireCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionnairePayload>
          }
          createMany: {
            args: Prisma.questionnaireCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.questionnaireDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionnairePayload>
          }
          update: {
            args: Prisma.questionnaireUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionnairePayload>
          }
          deleteMany: {
            args: Prisma.questionnaireDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.questionnaireUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.questionnaireUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionnairePayload>
          }
          aggregate: {
            args: Prisma.QuestionnaireAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateQuestionnaire>
          }
          groupBy: {
            args: Prisma.questionnaireGroupByArgs<ExtArgs>,
            result: $Utils.Optional<QuestionnaireGroupByOutputType>[]
          }
          count: {
            args: Prisma.questionnaireCountArgs<ExtArgs>,
            result: $Utils.Optional<QuestionnaireCountAggregateOutputType> | number
          }
        }
      }
      recommendation: {
        payload: Prisma.$recommendationPayload<ExtArgs>
        fields: Prisma.recommendationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.recommendationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$recommendationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.recommendationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$recommendationPayload>
          }
          findFirst: {
            args: Prisma.recommendationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$recommendationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.recommendationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$recommendationPayload>
          }
          findMany: {
            args: Prisma.recommendationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$recommendationPayload>[]
          }
          create: {
            args: Prisma.recommendationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$recommendationPayload>
          }
          createMany: {
            args: Prisma.recommendationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.recommendationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$recommendationPayload>
          }
          update: {
            args: Prisma.recommendationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$recommendationPayload>
          }
          deleteMany: {
            args: Prisma.recommendationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.recommendationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.recommendationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$recommendationPayload>
          }
          aggregate: {
            args: Prisma.RecommendationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRecommendation>
          }
          groupBy: {
            args: Prisma.recommendationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RecommendationGroupByOutputType>[]
          }
          count: {
            args: Prisma.recommendationCountArgs<ExtArgs>,
            result: $Utils.Optional<RecommendationCountAggregateOutputType> | number
          }
        }
      }
      responses: {
        payload: Prisma.$responsesPayload<ExtArgs>
        fields: Prisma.responsesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.responsesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$responsesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.responsesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$responsesPayload>
          }
          findFirst: {
            args: Prisma.responsesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$responsesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.responsesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$responsesPayload>
          }
          findMany: {
            args: Prisma.responsesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$responsesPayload>[]
          }
          create: {
            args: Prisma.responsesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$responsesPayload>
          }
          createMany: {
            args: Prisma.responsesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.responsesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$responsesPayload>
          }
          update: {
            args: Prisma.responsesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$responsesPayload>
          }
          deleteMany: {
            args: Prisma.responsesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.responsesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.responsesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$responsesPayload>
          }
          aggregate: {
            args: Prisma.ResponsesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateResponses>
          }
          groupBy: {
            args: Prisma.responsesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ResponsesGroupByOutputType>[]
          }
          count: {
            args: Prisma.responsesCountArgs<ExtArgs>,
            result: $Utils.Optional<ResponsesCountAggregateOutputType> | number
          }
        }
      }
      trip: {
        payload: Prisma.$tripPayload<ExtArgs>
        fields: Prisma.tripFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tripFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tripPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tripFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tripPayload>
          }
          findFirst: {
            args: Prisma.tripFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tripPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tripFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tripPayload>
          }
          findMany: {
            args: Prisma.tripFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tripPayload>[]
          }
          create: {
            args: Prisma.tripCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tripPayload>
          }
          createMany: {
            args: Prisma.tripCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.tripDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tripPayload>
          }
          update: {
            args: Prisma.tripUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tripPayload>
          }
          deleteMany: {
            args: Prisma.tripDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.tripUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.tripUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tripPayload>
          }
          aggregate: {
            args: Prisma.TripAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTrip>
          }
          groupBy: {
            args: Prisma.tripGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TripGroupByOutputType>[]
          }
          count: {
            args: Prisma.tripCountArgs<ExtArgs>,
            result: $Utils.Optional<TripCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
    groupId: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
    groupId: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    password: string | null
    role: $Enums.Role | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
    groupId: number | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    password: string | null
    role: $Enums.Role | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
    groupId: number | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    email: number
    name: number
    password: number
    role: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    groupId: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
    groupId?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
    groupId?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    groupId?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    groupId?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    groupId?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: number
    email: string
    name: string | null
    password: string
    role: $Enums.Role
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    groupId: number | null
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    groupId?: boolean
  }, ExtArgs["result"]["users"]>

  export type usersSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    groupId?: boolean
  }


  export type $usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      name: string | null
      password: string
      role: $Enums.Role
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
      groupId: number | null
    }, ExtArgs["result"]["users"]>
    composites: {}
  }


  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<usersFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, usersCreateArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, usersDeleteArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpdateArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpsertArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the users model
   */ 
  interface usersFieldRefs {
    readonly id: FieldRef<"users", 'Int'>
    readonly email: FieldRef<"users", 'String'>
    readonly name: FieldRef<"users", 'String'>
    readonly password: FieldRef<"users", 'String'>
    readonly role: FieldRef<"users", 'Role'>
    readonly createdAt: FieldRef<"users", 'DateTime'>
    readonly updatedAt: FieldRef<"users", 'DateTime'>
    readonly deletedAt: FieldRef<"users", 'DateTime'>
    readonly groupId: FieldRef<"users", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
  }


  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
  }



  /**
   * Model choice
   */

  export type AggregateChoice = {
    _count: ChoiceCountAggregateOutputType | null
    _avg: ChoiceAvgAggregateOutputType | null
    _sum: ChoiceSumAggregateOutputType | null
    _min: ChoiceMinAggregateOutputType | null
    _max: ChoiceMaxAggregateOutputType | null
  }

  export type ChoiceAvgAggregateOutputType = {
    id_choice: number | null
    id_question: number | null
  }

  export type ChoiceSumAggregateOutputType = {
    id_choice: number | null
    id_question: number | null
  }

  export type ChoiceMinAggregateOutputType = {
    id_choice: number | null
    choice: string | null
    id_question: number | null
  }

  export type ChoiceMaxAggregateOutputType = {
    id_choice: number | null
    choice: string | null
    id_question: number | null
  }

  export type ChoiceCountAggregateOutputType = {
    id_choice: number
    choice: number
    id_question: number
    _all: number
  }


  export type ChoiceAvgAggregateInputType = {
    id_choice?: true
    id_question?: true
  }

  export type ChoiceSumAggregateInputType = {
    id_choice?: true
    id_question?: true
  }

  export type ChoiceMinAggregateInputType = {
    id_choice?: true
    choice?: true
    id_question?: true
  }

  export type ChoiceMaxAggregateInputType = {
    id_choice?: true
    choice?: true
    id_question?: true
  }

  export type ChoiceCountAggregateInputType = {
    id_choice?: true
    choice?: true
    id_question?: true
    _all?: true
  }

  export type ChoiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which choice to aggregate.
     */
    where?: choiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of choices to fetch.
     */
    orderBy?: choiceOrderByWithRelationInput | choiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: choiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` choices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` choices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned choices
    **/
    _count?: true | ChoiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChoiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChoiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChoiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChoiceMaxAggregateInputType
  }

  export type GetChoiceAggregateType<T extends ChoiceAggregateArgs> = {
        [P in keyof T & keyof AggregateChoice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChoice[P]>
      : GetScalarType<T[P], AggregateChoice[P]>
  }




  export type choiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: choiceWhereInput
    orderBy?: choiceOrderByWithAggregationInput | choiceOrderByWithAggregationInput[]
    by: ChoiceScalarFieldEnum[] | ChoiceScalarFieldEnum
    having?: choiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChoiceCountAggregateInputType | true
    _avg?: ChoiceAvgAggregateInputType
    _sum?: ChoiceSumAggregateInputType
    _min?: ChoiceMinAggregateInputType
    _max?: ChoiceMaxAggregateInputType
  }

  export type ChoiceGroupByOutputType = {
    id_choice: number
    choice: string
    id_question: number
    _count: ChoiceCountAggregateOutputType | null
    _avg: ChoiceAvgAggregateOutputType | null
    _sum: ChoiceSumAggregateOutputType | null
    _min: ChoiceMinAggregateOutputType | null
    _max: ChoiceMaxAggregateOutputType | null
  }

  type GetChoiceGroupByPayload<T extends choiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChoiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChoiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChoiceGroupByOutputType[P]>
            : GetScalarType<T[P], ChoiceGroupByOutputType[P]>
        }
      >
    >


  export type choiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_choice?: boolean
    choice?: boolean
    id_question?: boolean
  }, ExtArgs["result"]["choice"]>

  export type choiceSelectScalar = {
    id_choice?: boolean
    choice?: boolean
    id_question?: boolean
  }


  export type $choicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "choice"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id_choice: number
      choice: string
      id_question: number
    }, ExtArgs["result"]["choice"]>
    composites: {}
  }


  type choiceGetPayload<S extends boolean | null | undefined | choiceDefaultArgs> = $Result.GetResult<Prisma.$choicePayload, S>

  type choiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<choiceFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ChoiceCountAggregateInputType | true
    }

  export interface choiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['choice'], meta: { name: 'choice' } }
    /**
     * Find zero or one Choice that matches the filter.
     * @param {choiceFindUniqueArgs} args - Arguments to find a Choice
     * @example
     * // Get one Choice
     * const choice = await prisma.choice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends choiceFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, choiceFindUniqueArgs<ExtArgs>>
    ): Prisma__choiceClient<$Result.GetResult<Prisma.$choicePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Choice that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {choiceFindUniqueOrThrowArgs} args - Arguments to find a Choice
     * @example
     * // Get one Choice
     * const choice = await prisma.choice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends choiceFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, choiceFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__choiceClient<$Result.GetResult<Prisma.$choicePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Choice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {choiceFindFirstArgs} args - Arguments to find a Choice
     * @example
     * // Get one Choice
     * const choice = await prisma.choice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends choiceFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, choiceFindFirstArgs<ExtArgs>>
    ): Prisma__choiceClient<$Result.GetResult<Prisma.$choicePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Choice that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {choiceFindFirstOrThrowArgs} args - Arguments to find a Choice
     * @example
     * // Get one Choice
     * const choice = await prisma.choice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends choiceFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, choiceFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__choiceClient<$Result.GetResult<Prisma.$choicePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Choices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {choiceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Choices
     * const choices = await prisma.choice.findMany()
     * 
     * // Get first 10 Choices
     * const choices = await prisma.choice.findMany({ take: 10 })
     * 
     * // Only select the `id_choice`
     * const choiceWithId_choiceOnly = await prisma.choice.findMany({ select: { id_choice: true } })
     * 
    **/
    findMany<T extends choiceFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, choiceFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$choicePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Choice.
     * @param {choiceCreateArgs} args - Arguments to create a Choice.
     * @example
     * // Create one Choice
     * const Choice = await prisma.choice.create({
     *   data: {
     *     // ... data to create a Choice
     *   }
     * })
     * 
    **/
    create<T extends choiceCreateArgs<ExtArgs>>(
      args: SelectSubset<T, choiceCreateArgs<ExtArgs>>
    ): Prisma__choiceClient<$Result.GetResult<Prisma.$choicePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Choices.
     *     @param {choiceCreateManyArgs} args - Arguments to create many Choices.
     *     @example
     *     // Create many Choices
     *     const choice = await prisma.choice.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends choiceCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, choiceCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Choice.
     * @param {choiceDeleteArgs} args - Arguments to delete one Choice.
     * @example
     * // Delete one Choice
     * const Choice = await prisma.choice.delete({
     *   where: {
     *     // ... filter to delete one Choice
     *   }
     * })
     * 
    **/
    delete<T extends choiceDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, choiceDeleteArgs<ExtArgs>>
    ): Prisma__choiceClient<$Result.GetResult<Prisma.$choicePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Choice.
     * @param {choiceUpdateArgs} args - Arguments to update one Choice.
     * @example
     * // Update one Choice
     * const choice = await prisma.choice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends choiceUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, choiceUpdateArgs<ExtArgs>>
    ): Prisma__choiceClient<$Result.GetResult<Prisma.$choicePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Choices.
     * @param {choiceDeleteManyArgs} args - Arguments to filter Choices to delete.
     * @example
     * // Delete a few Choices
     * const { count } = await prisma.choice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends choiceDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, choiceDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Choices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {choiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Choices
     * const choice = await prisma.choice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends choiceUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, choiceUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Choice.
     * @param {choiceUpsertArgs} args - Arguments to update or create a Choice.
     * @example
     * // Update or create a Choice
     * const choice = await prisma.choice.upsert({
     *   create: {
     *     // ... data to create a Choice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Choice we want to update
     *   }
     * })
    **/
    upsert<T extends choiceUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, choiceUpsertArgs<ExtArgs>>
    ): Prisma__choiceClient<$Result.GetResult<Prisma.$choicePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Choices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {choiceCountArgs} args - Arguments to filter Choices to count.
     * @example
     * // Count the number of Choices
     * const count = await prisma.choice.count({
     *   where: {
     *     // ... the filter for the Choices we want to count
     *   }
     * })
    **/
    count<T extends choiceCountArgs>(
      args?: Subset<T, choiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChoiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Choice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChoiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChoiceAggregateArgs>(args: Subset<T, ChoiceAggregateArgs>): Prisma.PrismaPromise<GetChoiceAggregateType<T>>

    /**
     * Group by Choice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {choiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends choiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: choiceGroupByArgs['orderBy'] }
        : { orderBy?: choiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, choiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChoiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the choice model
   */
  readonly fields: choiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for choice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__choiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the choice model
   */ 
  interface choiceFieldRefs {
    readonly id_choice: FieldRef<"choice", 'Int'>
    readonly choice: FieldRef<"choice", 'String'>
    readonly id_question: FieldRef<"choice", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * choice findUnique
   */
  export type choiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the choice
     */
    select?: choiceSelect<ExtArgs> | null
    /**
     * Filter, which choice to fetch.
     */
    where: choiceWhereUniqueInput
  }


  /**
   * choice findUniqueOrThrow
   */
  export type choiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the choice
     */
    select?: choiceSelect<ExtArgs> | null
    /**
     * Filter, which choice to fetch.
     */
    where: choiceWhereUniqueInput
  }


  /**
   * choice findFirst
   */
  export type choiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the choice
     */
    select?: choiceSelect<ExtArgs> | null
    /**
     * Filter, which choice to fetch.
     */
    where?: choiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of choices to fetch.
     */
    orderBy?: choiceOrderByWithRelationInput | choiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for choices.
     */
    cursor?: choiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` choices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` choices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of choices.
     */
    distinct?: ChoiceScalarFieldEnum | ChoiceScalarFieldEnum[]
  }


  /**
   * choice findFirstOrThrow
   */
  export type choiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the choice
     */
    select?: choiceSelect<ExtArgs> | null
    /**
     * Filter, which choice to fetch.
     */
    where?: choiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of choices to fetch.
     */
    orderBy?: choiceOrderByWithRelationInput | choiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for choices.
     */
    cursor?: choiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` choices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` choices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of choices.
     */
    distinct?: ChoiceScalarFieldEnum | ChoiceScalarFieldEnum[]
  }


  /**
   * choice findMany
   */
  export type choiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the choice
     */
    select?: choiceSelect<ExtArgs> | null
    /**
     * Filter, which choices to fetch.
     */
    where?: choiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of choices to fetch.
     */
    orderBy?: choiceOrderByWithRelationInput | choiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing choices.
     */
    cursor?: choiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` choices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` choices.
     */
    skip?: number
    distinct?: ChoiceScalarFieldEnum | ChoiceScalarFieldEnum[]
  }


  /**
   * choice create
   */
  export type choiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the choice
     */
    select?: choiceSelect<ExtArgs> | null
    /**
     * The data needed to create a choice.
     */
    data: XOR<choiceCreateInput, choiceUncheckedCreateInput>
  }


  /**
   * choice createMany
   */
  export type choiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many choices.
     */
    data: choiceCreateManyInput | choiceCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * choice update
   */
  export type choiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the choice
     */
    select?: choiceSelect<ExtArgs> | null
    /**
     * The data needed to update a choice.
     */
    data: XOR<choiceUpdateInput, choiceUncheckedUpdateInput>
    /**
     * Choose, which choice to update.
     */
    where: choiceWhereUniqueInput
  }


  /**
   * choice updateMany
   */
  export type choiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update choices.
     */
    data: XOR<choiceUpdateManyMutationInput, choiceUncheckedUpdateManyInput>
    /**
     * Filter which choices to update
     */
    where?: choiceWhereInput
  }


  /**
   * choice upsert
   */
  export type choiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the choice
     */
    select?: choiceSelect<ExtArgs> | null
    /**
     * The filter to search for the choice to update in case it exists.
     */
    where: choiceWhereUniqueInput
    /**
     * In case the choice found by the `where` argument doesn't exist, create a new choice with this data.
     */
    create: XOR<choiceCreateInput, choiceUncheckedCreateInput>
    /**
     * In case the choice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<choiceUpdateInput, choiceUncheckedUpdateInput>
  }


  /**
   * choice delete
   */
  export type choiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the choice
     */
    select?: choiceSelect<ExtArgs> | null
    /**
     * Filter which choice to delete.
     */
    where: choiceWhereUniqueInput
  }


  /**
   * choice deleteMany
   */
  export type choiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which choices to delete
     */
    where?: choiceWhereInput
  }


  /**
   * choice without action
   */
  export type choiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the choice
     */
    select?: choiceSelect<ExtArgs> | null
  }



  /**
   * Model feedback_question
   */

  export type AggregateFeedback_question = {
    _count: Feedback_questionCountAggregateOutputType | null
    _avg: Feedback_questionAvgAggregateOutputType | null
    _sum: Feedback_questionSumAggregateOutputType | null
    _min: Feedback_questionMinAggregateOutputType | null
    _max: Feedback_questionMaxAggregateOutputType | null
  }

  export type Feedback_questionAvgAggregateOutputType = {
    id_feedback_q: number | null
    question_rate: number | null
    id_recommen: number | null
  }

  export type Feedback_questionSumAggregateOutputType = {
    id_feedback_q: number | null
    question_rate: number | null
    id_recommen: number | null
  }

  export type Feedback_questionMinAggregateOutputType = {
    id_feedback_q: number | null
    question_feedback: string | null
    question_rate: number | null
    id_recommen: number | null
  }

  export type Feedback_questionMaxAggregateOutputType = {
    id_feedback_q: number | null
    question_feedback: string | null
    question_rate: number | null
    id_recommen: number | null
  }

  export type Feedback_questionCountAggregateOutputType = {
    id_feedback_q: number
    question_feedback: number
    question_rate: number
    id_recommen: number
    _all: number
  }


  export type Feedback_questionAvgAggregateInputType = {
    id_feedback_q?: true
    question_rate?: true
    id_recommen?: true
  }

  export type Feedback_questionSumAggregateInputType = {
    id_feedback_q?: true
    question_rate?: true
    id_recommen?: true
  }

  export type Feedback_questionMinAggregateInputType = {
    id_feedback_q?: true
    question_feedback?: true
    question_rate?: true
    id_recommen?: true
  }

  export type Feedback_questionMaxAggregateInputType = {
    id_feedback_q?: true
    question_feedback?: true
    question_rate?: true
    id_recommen?: true
  }

  export type Feedback_questionCountAggregateInputType = {
    id_feedback_q?: true
    question_feedback?: true
    question_rate?: true
    id_recommen?: true
    _all?: true
  }

  export type Feedback_questionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which feedback_question to aggregate.
     */
    where?: feedback_questionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of feedback_questions to fetch.
     */
    orderBy?: feedback_questionOrderByWithRelationInput | feedback_questionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: feedback_questionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` feedback_questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` feedback_questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned feedback_questions
    **/
    _count?: true | Feedback_questionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Feedback_questionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Feedback_questionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Feedback_questionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Feedback_questionMaxAggregateInputType
  }

  export type GetFeedback_questionAggregateType<T extends Feedback_questionAggregateArgs> = {
        [P in keyof T & keyof AggregateFeedback_question]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedback_question[P]>
      : GetScalarType<T[P], AggregateFeedback_question[P]>
  }




  export type feedback_questionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: feedback_questionWhereInput
    orderBy?: feedback_questionOrderByWithAggregationInput | feedback_questionOrderByWithAggregationInput[]
    by: Feedback_questionScalarFieldEnum[] | Feedback_questionScalarFieldEnum
    having?: feedback_questionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Feedback_questionCountAggregateInputType | true
    _avg?: Feedback_questionAvgAggregateInputType
    _sum?: Feedback_questionSumAggregateInputType
    _min?: Feedback_questionMinAggregateInputType
    _max?: Feedback_questionMaxAggregateInputType
  }

  export type Feedback_questionGroupByOutputType = {
    id_feedback_q: number
    question_feedback: string
    question_rate: number
    id_recommen: number
    _count: Feedback_questionCountAggregateOutputType | null
    _avg: Feedback_questionAvgAggregateOutputType | null
    _sum: Feedback_questionSumAggregateOutputType | null
    _min: Feedback_questionMinAggregateOutputType | null
    _max: Feedback_questionMaxAggregateOutputType | null
  }

  type GetFeedback_questionGroupByPayload<T extends feedback_questionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Feedback_questionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Feedback_questionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Feedback_questionGroupByOutputType[P]>
            : GetScalarType<T[P], Feedback_questionGroupByOutputType[P]>
        }
      >
    >


  export type feedback_questionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_feedback_q?: boolean
    question_feedback?: boolean
    question_rate?: boolean
    id_recommen?: boolean
  }, ExtArgs["result"]["feedback_question"]>

  export type feedback_questionSelectScalar = {
    id_feedback_q?: boolean
    question_feedback?: boolean
    question_rate?: boolean
    id_recommen?: boolean
  }


  export type $feedback_questionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "feedback_question"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id_feedback_q: number
      question_feedback: string
      question_rate: number
      id_recommen: number
    }, ExtArgs["result"]["feedback_question"]>
    composites: {}
  }


  type feedback_questionGetPayload<S extends boolean | null | undefined | feedback_questionDefaultArgs> = $Result.GetResult<Prisma.$feedback_questionPayload, S>

  type feedback_questionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<feedback_questionFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: Feedback_questionCountAggregateInputType | true
    }

  export interface feedback_questionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['feedback_question'], meta: { name: 'feedback_question' } }
    /**
     * Find zero or one Feedback_question that matches the filter.
     * @param {feedback_questionFindUniqueArgs} args - Arguments to find a Feedback_question
     * @example
     * // Get one Feedback_question
     * const feedback_question = await prisma.feedback_question.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends feedback_questionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, feedback_questionFindUniqueArgs<ExtArgs>>
    ): Prisma__feedback_questionClient<$Result.GetResult<Prisma.$feedback_questionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Feedback_question that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {feedback_questionFindUniqueOrThrowArgs} args - Arguments to find a Feedback_question
     * @example
     * // Get one Feedback_question
     * const feedback_question = await prisma.feedback_question.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends feedback_questionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, feedback_questionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__feedback_questionClient<$Result.GetResult<Prisma.$feedback_questionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Feedback_question that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {feedback_questionFindFirstArgs} args - Arguments to find a Feedback_question
     * @example
     * // Get one Feedback_question
     * const feedback_question = await prisma.feedback_question.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends feedback_questionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, feedback_questionFindFirstArgs<ExtArgs>>
    ): Prisma__feedback_questionClient<$Result.GetResult<Prisma.$feedback_questionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Feedback_question that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {feedback_questionFindFirstOrThrowArgs} args - Arguments to find a Feedback_question
     * @example
     * // Get one Feedback_question
     * const feedback_question = await prisma.feedback_question.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends feedback_questionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, feedback_questionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__feedback_questionClient<$Result.GetResult<Prisma.$feedback_questionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Feedback_questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {feedback_questionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Feedback_questions
     * const feedback_questions = await prisma.feedback_question.findMany()
     * 
     * // Get first 10 Feedback_questions
     * const feedback_questions = await prisma.feedback_question.findMany({ take: 10 })
     * 
     * // Only select the `id_feedback_q`
     * const feedback_questionWithId_feedback_qOnly = await prisma.feedback_question.findMany({ select: { id_feedback_q: true } })
     * 
    **/
    findMany<T extends feedback_questionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, feedback_questionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$feedback_questionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Feedback_question.
     * @param {feedback_questionCreateArgs} args - Arguments to create a Feedback_question.
     * @example
     * // Create one Feedback_question
     * const Feedback_question = await prisma.feedback_question.create({
     *   data: {
     *     // ... data to create a Feedback_question
     *   }
     * })
     * 
    **/
    create<T extends feedback_questionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, feedback_questionCreateArgs<ExtArgs>>
    ): Prisma__feedback_questionClient<$Result.GetResult<Prisma.$feedback_questionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Feedback_questions.
     *     @param {feedback_questionCreateManyArgs} args - Arguments to create many Feedback_questions.
     *     @example
     *     // Create many Feedback_questions
     *     const feedback_question = await prisma.feedback_question.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends feedback_questionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, feedback_questionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Feedback_question.
     * @param {feedback_questionDeleteArgs} args - Arguments to delete one Feedback_question.
     * @example
     * // Delete one Feedback_question
     * const Feedback_question = await prisma.feedback_question.delete({
     *   where: {
     *     // ... filter to delete one Feedback_question
     *   }
     * })
     * 
    **/
    delete<T extends feedback_questionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, feedback_questionDeleteArgs<ExtArgs>>
    ): Prisma__feedback_questionClient<$Result.GetResult<Prisma.$feedback_questionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Feedback_question.
     * @param {feedback_questionUpdateArgs} args - Arguments to update one Feedback_question.
     * @example
     * // Update one Feedback_question
     * const feedback_question = await prisma.feedback_question.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends feedback_questionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, feedback_questionUpdateArgs<ExtArgs>>
    ): Prisma__feedback_questionClient<$Result.GetResult<Prisma.$feedback_questionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Feedback_questions.
     * @param {feedback_questionDeleteManyArgs} args - Arguments to filter Feedback_questions to delete.
     * @example
     * // Delete a few Feedback_questions
     * const { count } = await prisma.feedback_question.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends feedback_questionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, feedback_questionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feedback_questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {feedback_questionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Feedback_questions
     * const feedback_question = await prisma.feedback_question.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends feedback_questionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, feedback_questionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Feedback_question.
     * @param {feedback_questionUpsertArgs} args - Arguments to update or create a Feedback_question.
     * @example
     * // Update or create a Feedback_question
     * const feedback_question = await prisma.feedback_question.upsert({
     *   create: {
     *     // ... data to create a Feedback_question
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Feedback_question we want to update
     *   }
     * })
    **/
    upsert<T extends feedback_questionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, feedback_questionUpsertArgs<ExtArgs>>
    ): Prisma__feedback_questionClient<$Result.GetResult<Prisma.$feedback_questionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Feedback_questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {feedback_questionCountArgs} args - Arguments to filter Feedback_questions to count.
     * @example
     * // Count the number of Feedback_questions
     * const count = await prisma.feedback_question.count({
     *   where: {
     *     // ... the filter for the Feedback_questions we want to count
     *   }
     * })
    **/
    count<T extends feedback_questionCountArgs>(
      args?: Subset<T, feedback_questionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Feedback_questionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Feedback_question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Feedback_questionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Feedback_questionAggregateArgs>(args: Subset<T, Feedback_questionAggregateArgs>): Prisma.PrismaPromise<GetFeedback_questionAggregateType<T>>

    /**
     * Group by Feedback_question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {feedback_questionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends feedback_questionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: feedback_questionGroupByArgs['orderBy'] }
        : { orderBy?: feedback_questionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, feedback_questionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedback_questionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the feedback_question model
   */
  readonly fields: feedback_questionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for feedback_question.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__feedback_questionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the feedback_question model
   */ 
  interface feedback_questionFieldRefs {
    readonly id_feedback_q: FieldRef<"feedback_question", 'Int'>
    readonly question_feedback: FieldRef<"feedback_question", 'String'>
    readonly question_rate: FieldRef<"feedback_question", 'Int'>
    readonly id_recommen: FieldRef<"feedback_question", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * feedback_question findUnique
   */
  export type feedback_questionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feedback_question
     */
    select?: feedback_questionSelect<ExtArgs> | null
    /**
     * Filter, which feedback_question to fetch.
     */
    where: feedback_questionWhereUniqueInput
  }


  /**
   * feedback_question findUniqueOrThrow
   */
  export type feedback_questionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feedback_question
     */
    select?: feedback_questionSelect<ExtArgs> | null
    /**
     * Filter, which feedback_question to fetch.
     */
    where: feedback_questionWhereUniqueInput
  }


  /**
   * feedback_question findFirst
   */
  export type feedback_questionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feedback_question
     */
    select?: feedback_questionSelect<ExtArgs> | null
    /**
     * Filter, which feedback_question to fetch.
     */
    where?: feedback_questionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of feedback_questions to fetch.
     */
    orderBy?: feedback_questionOrderByWithRelationInput | feedback_questionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for feedback_questions.
     */
    cursor?: feedback_questionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` feedback_questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` feedback_questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of feedback_questions.
     */
    distinct?: Feedback_questionScalarFieldEnum | Feedback_questionScalarFieldEnum[]
  }


  /**
   * feedback_question findFirstOrThrow
   */
  export type feedback_questionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feedback_question
     */
    select?: feedback_questionSelect<ExtArgs> | null
    /**
     * Filter, which feedback_question to fetch.
     */
    where?: feedback_questionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of feedback_questions to fetch.
     */
    orderBy?: feedback_questionOrderByWithRelationInput | feedback_questionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for feedback_questions.
     */
    cursor?: feedback_questionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` feedback_questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` feedback_questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of feedback_questions.
     */
    distinct?: Feedback_questionScalarFieldEnum | Feedback_questionScalarFieldEnum[]
  }


  /**
   * feedback_question findMany
   */
  export type feedback_questionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feedback_question
     */
    select?: feedback_questionSelect<ExtArgs> | null
    /**
     * Filter, which feedback_questions to fetch.
     */
    where?: feedback_questionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of feedback_questions to fetch.
     */
    orderBy?: feedback_questionOrderByWithRelationInput | feedback_questionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing feedback_questions.
     */
    cursor?: feedback_questionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` feedback_questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` feedback_questions.
     */
    skip?: number
    distinct?: Feedback_questionScalarFieldEnum | Feedback_questionScalarFieldEnum[]
  }


  /**
   * feedback_question create
   */
  export type feedback_questionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feedback_question
     */
    select?: feedback_questionSelect<ExtArgs> | null
    /**
     * The data needed to create a feedback_question.
     */
    data: XOR<feedback_questionCreateInput, feedback_questionUncheckedCreateInput>
  }


  /**
   * feedback_question createMany
   */
  export type feedback_questionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many feedback_questions.
     */
    data: feedback_questionCreateManyInput | feedback_questionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * feedback_question update
   */
  export type feedback_questionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feedback_question
     */
    select?: feedback_questionSelect<ExtArgs> | null
    /**
     * The data needed to update a feedback_question.
     */
    data: XOR<feedback_questionUpdateInput, feedback_questionUncheckedUpdateInput>
    /**
     * Choose, which feedback_question to update.
     */
    where: feedback_questionWhereUniqueInput
  }


  /**
   * feedback_question updateMany
   */
  export type feedback_questionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update feedback_questions.
     */
    data: XOR<feedback_questionUpdateManyMutationInput, feedback_questionUncheckedUpdateManyInput>
    /**
     * Filter which feedback_questions to update
     */
    where?: feedback_questionWhereInput
  }


  /**
   * feedback_question upsert
   */
  export type feedback_questionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feedback_question
     */
    select?: feedback_questionSelect<ExtArgs> | null
    /**
     * The filter to search for the feedback_question to update in case it exists.
     */
    where: feedback_questionWhereUniqueInput
    /**
     * In case the feedback_question found by the `where` argument doesn't exist, create a new feedback_question with this data.
     */
    create: XOR<feedback_questionCreateInput, feedback_questionUncheckedCreateInput>
    /**
     * In case the feedback_question was found with the provided `where` argument, update it with this data.
     */
    update: XOR<feedback_questionUpdateInput, feedback_questionUncheckedUpdateInput>
  }


  /**
   * feedback_question delete
   */
  export type feedback_questionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feedback_question
     */
    select?: feedback_questionSelect<ExtArgs> | null
    /**
     * Filter which feedback_question to delete.
     */
    where: feedback_questionWhereUniqueInput
  }


  /**
   * feedback_question deleteMany
   */
  export type feedback_questionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which feedback_questions to delete
     */
    where?: feedback_questionWhereInput
  }


  /**
   * feedback_question without action
   */
  export type feedback_questionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feedback_question
     */
    select?: feedback_questionSelect<ExtArgs> | null
  }



  /**
   * Model mgroup
   */

  export type AggregateMgroup = {
    _count: MgroupCountAggregateOutputType | null
    _avg: MgroupAvgAggregateOutputType | null
    _sum: MgroupSumAggregateOutputType | null
    _min: MgroupMinAggregateOutputType | null
    _max: MgroupMaxAggregateOutputType | null
  }

  export type MgroupAvgAggregateOutputType = {
    id_group: number | null
  }

  export type MgroupSumAggregateOutputType = {
    id_group: number | null
  }

  export type MgroupMinAggregateOutputType = {
    id_group: number | null
    group_name: string | null
    group_description: string | null
    image: string | null
  }

  export type MgroupMaxAggregateOutputType = {
    id_group: number | null
    group_name: string | null
    group_description: string | null
    image: string | null
  }

  export type MgroupCountAggregateOutputType = {
    id_group: number
    group_name: number
    group_description: number
    image: number
    _all: number
  }


  export type MgroupAvgAggregateInputType = {
    id_group?: true
  }

  export type MgroupSumAggregateInputType = {
    id_group?: true
  }

  export type MgroupMinAggregateInputType = {
    id_group?: true
    group_name?: true
    group_description?: true
    image?: true
  }

  export type MgroupMaxAggregateInputType = {
    id_group?: true
    group_name?: true
    group_description?: true
    image?: true
  }

  export type MgroupCountAggregateInputType = {
    id_group?: true
    group_name?: true
    group_description?: true
    image?: true
    _all?: true
  }

  export type MgroupAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which mgroup to aggregate.
     */
    where?: mgroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of mgroups to fetch.
     */
    orderBy?: mgroupOrderByWithRelationInput | mgroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: mgroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` mgroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` mgroups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned mgroups
    **/
    _count?: true | MgroupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MgroupAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MgroupSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MgroupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MgroupMaxAggregateInputType
  }

  export type GetMgroupAggregateType<T extends MgroupAggregateArgs> = {
        [P in keyof T & keyof AggregateMgroup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMgroup[P]>
      : GetScalarType<T[P], AggregateMgroup[P]>
  }




  export type mgroupGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: mgroupWhereInput
    orderBy?: mgroupOrderByWithAggregationInput | mgroupOrderByWithAggregationInput[]
    by: MgroupScalarFieldEnum[] | MgroupScalarFieldEnum
    having?: mgroupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MgroupCountAggregateInputType | true
    _avg?: MgroupAvgAggregateInputType
    _sum?: MgroupSumAggregateInputType
    _min?: MgroupMinAggregateInputType
    _max?: MgroupMaxAggregateInputType
  }

  export type MgroupGroupByOutputType = {
    id_group: number
    group_name: string
    group_description: string
    image: string
    _count: MgroupCountAggregateOutputType | null
    _avg: MgroupAvgAggregateOutputType | null
    _sum: MgroupSumAggregateOutputType | null
    _min: MgroupMinAggregateOutputType | null
    _max: MgroupMaxAggregateOutputType | null
  }

  type GetMgroupGroupByPayload<T extends mgroupGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MgroupGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MgroupGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MgroupGroupByOutputType[P]>
            : GetScalarType<T[P], MgroupGroupByOutputType[P]>
        }
      >
    >


  export type mgroupSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_group?: boolean
    group_name?: boolean
    group_description?: boolean
    image?: boolean
  }, ExtArgs["result"]["mgroup"]>

  export type mgroupSelectScalar = {
    id_group?: boolean
    group_name?: boolean
    group_description?: boolean
    image?: boolean
  }


  export type $mgroupPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "mgroup"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id_group: number
      group_name: string
      group_description: string
      image: string
    }, ExtArgs["result"]["mgroup"]>
    composites: {}
  }


  type mgroupGetPayload<S extends boolean | null | undefined | mgroupDefaultArgs> = $Result.GetResult<Prisma.$mgroupPayload, S>

  type mgroupCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<mgroupFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: MgroupCountAggregateInputType | true
    }

  export interface mgroupDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['mgroup'], meta: { name: 'mgroup' } }
    /**
     * Find zero or one Mgroup that matches the filter.
     * @param {mgroupFindUniqueArgs} args - Arguments to find a Mgroup
     * @example
     * // Get one Mgroup
     * const mgroup = await prisma.mgroup.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends mgroupFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, mgroupFindUniqueArgs<ExtArgs>>
    ): Prisma__mgroupClient<$Result.GetResult<Prisma.$mgroupPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Mgroup that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {mgroupFindUniqueOrThrowArgs} args - Arguments to find a Mgroup
     * @example
     * // Get one Mgroup
     * const mgroup = await prisma.mgroup.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends mgroupFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, mgroupFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__mgroupClient<$Result.GetResult<Prisma.$mgroupPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Mgroup that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mgroupFindFirstArgs} args - Arguments to find a Mgroup
     * @example
     * // Get one Mgroup
     * const mgroup = await prisma.mgroup.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends mgroupFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, mgroupFindFirstArgs<ExtArgs>>
    ): Prisma__mgroupClient<$Result.GetResult<Prisma.$mgroupPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Mgroup that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mgroupFindFirstOrThrowArgs} args - Arguments to find a Mgroup
     * @example
     * // Get one Mgroup
     * const mgroup = await prisma.mgroup.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends mgroupFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, mgroupFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__mgroupClient<$Result.GetResult<Prisma.$mgroupPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Mgroups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mgroupFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Mgroups
     * const mgroups = await prisma.mgroup.findMany()
     * 
     * // Get first 10 Mgroups
     * const mgroups = await prisma.mgroup.findMany({ take: 10 })
     * 
     * // Only select the `id_group`
     * const mgroupWithId_groupOnly = await prisma.mgroup.findMany({ select: { id_group: true } })
     * 
    **/
    findMany<T extends mgroupFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, mgroupFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$mgroupPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Mgroup.
     * @param {mgroupCreateArgs} args - Arguments to create a Mgroup.
     * @example
     * // Create one Mgroup
     * const Mgroup = await prisma.mgroup.create({
     *   data: {
     *     // ... data to create a Mgroup
     *   }
     * })
     * 
    **/
    create<T extends mgroupCreateArgs<ExtArgs>>(
      args: SelectSubset<T, mgroupCreateArgs<ExtArgs>>
    ): Prisma__mgroupClient<$Result.GetResult<Prisma.$mgroupPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Mgroups.
     *     @param {mgroupCreateManyArgs} args - Arguments to create many Mgroups.
     *     @example
     *     // Create many Mgroups
     *     const mgroup = await prisma.mgroup.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends mgroupCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, mgroupCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Mgroup.
     * @param {mgroupDeleteArgs} args - Arguments to delete one Mgroup.
     * @example
     * // Delete one Mgroup
     * const Mgroup = await prisma.mgroup.delete({
     *   where: {
     *     // ... filter to delete one Mgroup
     *   }
     * })
     * 
    **/
    delete<T extends mgroupDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, mgroupDeleteArgs<ExtArgs>>
    ): Prisma__mgroupClient<$Result.GetResult<Prisma.$mgroupPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Mgroup.
     * @param {mgroupUpdateArgs} args - Arguments to update one Mgroup.
     * @example
     * // Update one Mgroup
     * const mgroup = await prisma.mgroup.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends mgroupUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, mgroupUpdateArgs<ExtArgs>>
    ): Prisma__mgroupClient<$Result.GetResult<Prisma.$mgroupPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Mgroups.
     * @param {mgroupDeleteManyArgs} args - Arguments to filter Mgroups to delete.
     * @example
     * // Delete a few Mgroups
     * const { count } = await prisma.mgroup.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends mgroupDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, mgroupDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Mgroups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mgroupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Mgroups
     * const mgroup = await prisma.mgroup.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends mgroupUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, mgroupUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Mgroup.
     * @param {mgroupUpsertArgs} args - Arguments to update or create a Mgroup.
     * @example
     * // Update or create a Mgroup
     * const mgroup = await prisma.mgroup.upsert({
     *   create: {
     *     // ... data to create a Mgroup
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Mgroup we want to update
     *   }
     * })
    **/
    upsert<T extends mgroupUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, mgroupUpsertArgs<ExtArgs>>
    ): Prisma__mgroupClient<$Result.GetResult<Prisma.$mgroupPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Mgroups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mgroupCountArgs} args - Arguments to filter Mgroups to count.
     * @example
     * // Count the number of Mgroups
     * const count = await prisma.mgroup.count({
     *   where: {
     *     // ... the filter for the Mgroups we want to count
     *   }
     * })
    **/
    count<T extends mgroupCountArgs>(
      args?: Subset<T, mgroupCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MgroupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Mgroup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MgroupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MgroupAggregateArgs>(args: Subset<T, MgroupAggregateArgs>): Prisma.PrismaPromise<GetMgroupAggregateType<T>>

    /**
     * Group by Mgroup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mgroupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends mgroupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: mgroupGroupByArgs['orderBy'] }
        : { orderBy?: mgroupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, mgroupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMgroupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the mgroup model
   */
  readonly fields: mgroupFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for mgroup.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__mgroupClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the mgroup model
   */ 
  interface mgroupFieldRefs {
    readonly id_group: FieldRef<"mgroup", 'Int'>
    readonly group_name: FieldRef<"mgroup", 'String'>
    readonly group_description: FieldRef<"mgroup", 'String'>
    readonly image: FieldRef<"mgroup", 'String'>
  }
    

  // Custom InputTypes

  /**
   * mgroup findUnique
   */
  export type mgroupFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mgroup
     */
    select?: mgroupSelect<ExtArgs> | null
    /**
     * Filter, which mgroup to fetch.
     */
    where: mgroupWhereUniqueInput
  }


  /**
   * mgroup findUniqueOrThrow
   */
  export type mgroupFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mgroup
     */
    select?: mgroupSelect<ExtArgs> | null
    /**
     * Filter, which mgroup to fetch.
     */
    where: mgroupWhereUniqueInput
  }


  /**
   * mgroup findFirst
   */
  export type mgroupFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mgroup
     */
    select?: mgroupSelect<ExtArgs> | null
    /**
     * Filter, which mgroup to fetch.
     */
    where?: mgroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of mgroups to fetch.
     */
    orderBy?: mgroupOrderByWithRelationInput | mgroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for mgroups.
     */
    cursor?: mgroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` mgroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` mgroups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of mgroups.
     */
    distinct?: MgroupScalarFieldEnum | MgroupScalarFieldEnum[]
  }


  /**
   * mgroup findFirstOrThrow
   */
  export type mgroupFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mgroup
     */
    select?: mgroupSelect<ExtArgs> | null
    /**
     * Filter, which mgroup to fetch.
     */
    where?: mgroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of mgroups to fetch.
     */
    orderBy?: mgroupOrderByWithRelationInput | mgroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for mgroups.
     */
    cursor?: mgroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` mgroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` mgroups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of mgroups.
     */
    distinct?: MgroupScalarFieldEnum | MgroupScalarFieldEnum[]
  }


  /**
   * mgroup findMany
   */
  export type mgroupFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mgroup
     */
    select?: mgroupSelect<ExtArgs> | null
    /**
     * Filter, which mgroups to fetch.
     */
    where?: mgroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of mgroups to fetch.
     */
    orderBy?: mgroupOrderByWithRelationInput | mgroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing mgroups.
     */
    cursor?: mgroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` mgroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` mgroups.
     */
    skip?: number
    distinct?: MgroupScalarFieldEnum | MgroupScalarFieldEnum[]
  }


  /**
   * mgroup create
   */
  export type mgroupCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mgroup
     */
    select?: mgroupSelect<ExtArgs> | null
    /**
     * The data needed to create a mgroup.
     */
    data: XOR<mgroupCreateInput, mgroupUncheckedCreateInput>
  }


  /**
   * mgroup createMany
   */
  export type mgroupCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many mgroups.
     */
    data: mgroupCreateManyInput | mgroupCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * mgroup update
   */
  export type mgroupUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mgroup
     */
    select?: mgroupSelect<ExtArgs> | null
    /**
     * The data needed to update a mgroup.
     */
    data: XOR<mgroupUpdateInput, mgroupUncheckedUpdateInput>
    /**
     * Choose, which mgroup to update.
     */
    where: mgroupWhereUniqueInput
  }


  /**
   * mgroup updateMany
   */
  export type mgroupUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update mgroups.
     */
    data: XOR<mgroupUpdateManyMutationInput, mgroupUncheckedUpdateManyInput>
    /**
     * Filter which mgroups to update
     */
    where?: mgroupWhereInput
  }


  /**
   * mgroup upsert
   */
  export type mgroupUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mgroup
     */
    select?: mgroupSelect<ExtArgs> | null
    /**
     * The filter to search for the mgroup to update in case it exists.
     */
    where: mgroupWhereUniqueInput
    /**
     * In case the mgroup found by the `where` argument doesn't exist, create a new mgroup with this data.
     */
    create: XOR<mgroupCreateInput, mgroupUncheckedCreateInput>
    /**
     * In case the mgroup was found with the provided `where` argument, update it with this data.
     */
    update: XOR<mgroupUpdateInput, mgroupUncheckedUpdateInput>
  }


  /**
   * mgroup delete
   */
  export type mgroupDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mgroup
     */
    select?: mgroupSelect<ExtArgs> | null
    /**
     * Filter which mgroup to delete.
     */
    where: mgroupWhereUniqueInput
  }


  /**
   * mgroup deleteMany
   */
  export type mgroupDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which mgroups to delete
     */
    where?: mgroupWhereInput
  }


  /**
   * mgroup without action
   */
  export type mgroupDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mgroup
     */
    select?: mgroupSelect<ExtArgs> | null
  }



  /**
   * Model questionnaire
   */

  export type AggregateQuestionnaire = {
    _count: QuestionnaireCountAggregateOutputType | null
    _avg: QuestionnaireAvgAggregateOutputType | null
    _sum: QuestionnaireSumAggregateOutputType | null
    _min: QuestionnaireMinAggregateOutputType | null
    _max: QuestionnaireMaxAggregateOutputType | null
  }

  export type QuestionnaireAvgAggregateOutputType = {
    id_question: number | null
  }

  export type QuestionnaireSumAggregateOutputType = {
    id_question: number | null
  }

  export type QuestionnaireMinAggregateOutputType = {
    id_question: number | null
    question_topic: string | null
  }

  export type QuestionnaireMaxAggregateOutputType = {
    id_question: number | null
    question_topic: string | null
  }

  export type QuestionnaireCountAggregateOutputType = {
    id_question: number
    question_topic: number
    _all: number
  }


  export type QuestionnaireAvgAggregateInputType = {
    id_question?: true
  }

  export type QuestionnaireSumAggregateInputType = {
    id_question?: true
  }

  export type QuestionnaireMinAggregateInputType = {
    id_question?: true
    question_topic?: true
  }

  export type QuestionnaireMaxAggregateInputType = {
    id_question?: true
    question_topic?: true
  }

  export type QuestionnaireCountAggregateInputType = {
    id_question?: true
    question_topic?: true
    _all?: true
  }

  export type QuestionnaireAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which questionnaire to aggregate.
     */
    where?: questionnaireWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questionnaires to fetch.
     */
    orderBy?: questionnaireOrderByWithRelationInput | questionnaireOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: questionnaireWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questionnaires from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questionnaires.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned questionnaires
    **/
    _count?: true | QuestionnaireCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionnaireAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionnaireSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionnaireMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionnaireMaxAggregateInputType
  }

  export type GetQuestionnaireAggregateType<T extends QuestionnaireAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestionnaire]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestionnaire[P]>
      : GetScalarType<T[P], AggregateQuestionnaire[P]>
  }




  export type questionnaireGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: questionnaireWhereInput
    orderBy?: questionnaireOrderByWithAggregationInput | questionnaireOrderByWithAggregationInput[]
    by: QuestionnaireScalarFieldEnum[] | QuestionnaireScalarFieldEnum
    having?: questionnaireScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionnaireCountAggregateInputType | true
    _avg?: QuestionnaireAvgAggregateInputType
    _sum?: QuestionnaireSumAggregateInputType
    _min?: QuestionnaireMinAggregateInputType
    _max?: QuestionnaireMaxAggregateInputType
  }

  export type QuestionnaireGroupByOutputType = {
    id_question: number
    question_topic: string
    _count: QuestionnaireCountAggregateOutputType | null
    _avg: QuestionnaireAvgAggregateOutputType | null
    _sum: QuestionnaireSumAggregateOutputType | null
    _min: QuestionnaireMinAggregateOutputType | null
    _max: QuestionnaireMaxAggregateOutputType | null
  }

  type GetQuestionnaireGroupByPayload<T extends questionnaireGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionnaireGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionnaireGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionnaireGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionnaireGroupByOutputType[P]>
        }
      >
    >


  export type questionnaireSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_question?: boolean
    question_topic?: boolean
  }, ExtArgs["result"]["questionnaire"]>

  export type questionnaireSelectScalar = {
    id_question?: boolean
    question_topic?: boolean
  }


  export type $questionnairePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "questionnaire"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id_question: number
      question_topic: string
    }, ExtArgs["result"]["questionnaire"]>
    composites: {}
  }


  type questionnaireGetPayload<S extends boolean | null | undefined | questionnaireDefaultArgs> = $Result.GetResult<Prisma.$questionnairePayload, S>

  type questionnaireCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<questionnaireFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: QuestionnaireCountAggregateInputType | true
    }

  export interface questionnaireDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['questionnaire'], meta: { name: 'questionnaire' } }
    /**
     * Find zero or one Questionnaire that matches the filter.
     * @param {questionnaireFindUniqueArgs} args - Arguments to find a Questionnaire
     * @example
     * // Get one Questionnaire
     * const questionnaire = await prisma.questionnaire.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends questionnaireFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, questionnaireFindUniqueArgs<ExtArgs>>
    ): Prisma__questionnaireClient<$Result.GetResult<Prisma.$questionnairePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Questionnaire that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {questionnaireFindUniqueOrThrowArgs} args - Arguments to find a Questionnaire
     * @example
     * // Get one Questionnaire
     * const questionnaire = await prisma.questionnaire.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends questionnaireFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, questionnaireFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__questionnaireClient<$Result.GetResult<Prisma.$questionnairePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Questionnaire that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionnaireFindFirstArgs} args - Arguments to find a Questionnaire
     * @example
     * // Get one Questionnaire
     * const questionnaire = await prisma.questionnaire.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends questionnaireFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, questionnaireFindFirstArgs<ExtArgs>>
    ): Prisma__questionnaireClient<$Result.GetResult<Prisma.$questionnairePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Questionnaire that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionnaireFindFirstOrThrowArgs} args - Arguments to find a Questionnaire
     * @example
     * // Get one Questionnaire
     * const questionnaire = await prisma.questionnaire.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends questionnaireFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, questionnaireFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__questionnaireClient<$Result.GetResult<Prisma.$questionnairePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Questionnaires that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionnaireFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Questionnaires
     * const questionnaires = await prisma.questionnaire.findMany()
     * 
     * // Get first 10 Questionnaires
     * const questionnaires = await prisma.questionnaire.findMany({ take: 10 })
     * 
     * // Only select the `id_question`
     * const questionnaireWithId_questionOnly = await prisma.questionnaire.findMany({ select: { id_question: true } })
     * 
    **/
    findMany<T extends questionnaireFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, questionnaireFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$questionnairePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Questionnaire.
     * @param {questionnaireCreateArgs} args - Arguments to create a Questionnaire.
     * @example
     * // Create one Questionnaire
     * const Questionnaire = await prisma.questionnaire.create({
     *   data: {
     *     // ... data to create a Questionnaire
     *   }
     * })
     * 
    **/
    create<T extends questionnaireCreateArgs<ExtArgs>>(
      args: SelectSubset<T, questionnaireCreateArgs<ExtArgs>>
    ): Prisma__questionnaireClient<$Result.GetResult<Prisma.$questionnairePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Questionnaires.
     *     @param {questionnaireCreateManyArgs} args - Arguments to create many Questionnaires.
     *     @example
     *     // Create many Questionnaires
     *     const questionnaire = await prisma.questionnaire.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends questionnaireCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, questionnaireCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Questionnaire.
     * @param {questionnaireDeleteArgs} args - Arguments to delete one Questionnaire.
     * @example
     * // Delete one Questionnaire
     * const Questionnaire = await prisma.questionnaire.delete({
     *   where: {
     *     // ... filter to delete one Questionnaire
     *   }
     * })
     * 
    **/
    delete<T extends questionnaireDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, questionnaireDeleteArgs<ExtArgs>>
    ): Prisma__questionnaireClient<$Result.GetResult<Prisma.$questionnairePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Questionnaire.
     * @param {questionnaireUpdateArgs} args - Arguments to update one Questionnaire.
     * @example
     * // Update one Questionnaire
     * const questionnaire = await prisma.questionnaire.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends questionnaireUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, questionnaireUpdateArgs<ExtArgs>>
    ): Prisma__questionnaireClient<$Result.GetResult<Prisma.$questionnairePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Questionnaires.
     * @param {questionnaireDeleteManyArgs} args - Arguments to filter Questionnaires to delete.
     * @example
     * // Delete a few Questionnaires
     * const { count } = await prisma.questionnaire.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends questionnaireDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, questionnaireDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questionnaires.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionnaireUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Questionnaires
     * const questionnaire = await prisma.questionnaire.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends questionnaireUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, questionnaireUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Questionnaire.
     * @param {questionnaireUpsertArgs} args - Arguments to update or create a Questionnaire.
     * @example
     * // Update or create a Questionnaire
     * const questionnaire = await prisma.questionnaire.upsert({
     *   create: {
     *     // ... data to create a Questionnaire
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Questionnaire we want to update
     *   }
     * })
    **/
    upsert<T extends questionnaireUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, questionnaireUpsertArgs<ExtArgs>>
    ): Prisma__questionnaireClient<$Result.GetResult<Prisma.$questionnairePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Questionnaires.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionnaireCountArgs} args - Arguments to filter Questionnaires to count.
     * @example
     * // Count the number of Questionnaires
     * const count = await prisma.questionnaire.count({
     *   where: {
     *     // ... the filter for the Questionnaires we want to count
     *   }
     * })
    **/
    count<T extends questionnaireCountArgs>(
      args?: Subset<T, questionnaireCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionnaireCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Questionnaire.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionnaireAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionnaireAggregateArgs>(args: Subset<T, QuestionnaireAggregateArgs>): Prisma.PrismaPromise<GetQuestionnaireAggregateType<T>>

    /**
     * Group by Questionnaire.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionnaireGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends questionnaireGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: questionnaireGroupByArgs['orderBy'] }
        : { orderBy?: questionnaireGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, questionnaireGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionnaireGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the questionnaire model
   */
  readonly fields: questionnaireFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for questionnaire.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__questionnaireClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the questionnaire model
   */ 
  interface questionnaireFieldRefs {
    readonly id_question: FieldRef<"questionnaire", 'Int'>
    readonly question_topic: FieldRef<"questionnaire", 'String'>
  }
    

  // Custom InputTypes

  /**
   * questionnaire findUnique
   */
  export type questionnaireFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questionnaire
     */
    select?: questionnaireSelect<ExtArgs> | null
    /**
     * Filter, which questionnaire to fetch.
     */
    where: questionnaireWhereUniqueInput
  }


  /**
   * questionnaire findUniqueOrThrow
   */
  export type questionnaireFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questionnaire
     */
    select?: questionnaireSelect<ExtArgs> | null
    /**
     * Filter, which questionnaire to fetch.
     */
    where: questionnaireWhereUniqueInput
  }


  /**
   * questionnaire findFirst
   */
  export type questionnaireFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questionnaire
     */
    select?: questionnaireSelect<ExtArgs> | null
    /**
     * Filter, which questionnaire to fetch.
     */
    where?: questionnaireWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questionnaires to fetch.
     */
    orderBy?: questionnaireOrderByWithRelationInput | questionnaireOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for questionnaires.
     */
    cursor?: questionnaireWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questionnaires from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questionnaires.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of questionnaires.
     */
    distinct?: QuestionnaireScalarFieldEnum | QuestionnaireScalarFieldEnum[]
  }


  /**
   * questionnaire findFirstOrThrow
   */
  export type questionnaireFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questionnaire
     */
    select?: questionnaireSelect<ExtArgs> | null
    /**
     * Filter, which questionnaire to fetch.
     */
    where?: questionnaireWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questionnaires to fetch.
     */
    orderBy?: questionnaireOrderByWithRelationInput | questionnaireOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for questionnaires.
     */
    cursor?: questionnaireWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questionnaires from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questionnaires.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of questionnaires.
     */
    distinct?: QuestionnaireScalarFieldEnum | QuestionnaireScalarFieldEnum[]
  }


  /**
   * questionnaire findMany
   */
  export type questionnaireFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questionnaire
     */
    select?: questionnaireSelect<ExtArgs> | null
    /**
     * Filter, which questionnaires to fetch.
     */
    where?: questionnaireWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questionnaires to fetch.
     */
    orderBy?: questionnaireOrderByWithRelationInput | questionnaireOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing questionnaires.
     */
    cursor?: questionnaireWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questionnaires from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questionnaires.
     */
    skip?: number
    distinct?: QuestionnaireScalarFieldEnum | QuestionnaireScalarFieldEnum[]
  }


  /**
   * questionnaire create
   */
  export type questionnaireCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questionnaire
     */
    select?: questionnaireSelect<ExtArgs> | null
    /**
     * The data needed to create a questionnaire.
     */
    data: XOR<questionnaireCreateInput, questionnaireUncheckedCreateInput>
  }


  /**
   * questionnaire createMany
   */
  export type questionnaireCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many questionnaires.
     */
    data: questionnaireCreateManyInput | questionnaireCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * questionnaire update
   */
  export type questionnaireUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questionnaire
     */
    select?: questionnaireSelect<ExtArgs> | null
    /**
     * The data needed to update a questionnaire.
     */
    data: XOR<questionnaireUpdateInput, questionnaireUncheckedUpdateInput>
    /**
     * Choose, which questionnaire to update.
     */
    where: questionnaireWhereUniqueInput
  }


  /**
   * questionnaire updateMany
   */
  export type questionnaireUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update questionnaires.
     */
    data: XOR<questionnaireUpdateManyMutationInput, questionnaireUncheckedUpdateManyInput>
    /**
     * Filter which questionnaires to update
     */
    where?: questionnaireWhereInput
  }


  /**
   * questionnaire upsert
   */
  export type questionnaireUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questionnaire
     */
    select?: questionnaireSelect<ExtArgs> | null
    /**
     * The filter to search for the questionnaire to update in case it exists.
     */
    where: questionnaireWhereUniqueInput
    /**
     * In case the questionnaire found by the `where` argument doesn't exist, create a new questionnaire with this data.
     */
    create: XOR<questionnaireCreateInput, questionnaireUncheckedCreateInput>
    /**
     * In case the questionnaire was found with the provided `where` argument, update it with this data.
     */
    update: XOR<questionnaireUpdateInput, questionnaireUncheckedUpdateInput>
  }


  /**
   * questionnaire delete
   */
  export type questionnaireDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questionnaire
     */
    select?: questionnaireSelect<ExtArgs> | null
    /**
     * Filter which questionnaire to delete.
     */
    where: questionnaireWhereUniqueInput
  }


  /**
   * questionnaire deleteMany
   */
  export type questionnaireDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which questionnaires to delete
     */
    where?: questionnaireWhereInput
  }


  /**
   * questionnaire without action
   */
  export type questionnaireDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questionnaire
     */
    select?: questionnaireSelect<ExtArgs> | null
  }



  /**
   * Model recommendation
   */

  export type AggregateRecommendation = {
    _count: RecommendationCountAggregateOutputType | null
    _avg: RecommendationAvgAggregateOutputType | null
    _sum: RecommendationSumAggregateOutputType | null
    _min: RecommendationMinAggregateOutputType | null
    _max: RecommendationMaxAggregateOutputType | null
  }

  export type RecommendationAvgAggregateOutputType = {
    id_recommen: number | null
    id_group: number | null
    id_users: number | null
  }

  export type RecommendationSumAggregateOutputType = {
    id_recommen: number | null
    id_group: number | null
    id_users: number | null
  }

  export type RecommendationMinAggregateOutputType = {
    id_recommen: number | null
    id_group: number | null
    id_users: number | null
  }

  export type RecommendationMaxAggregateOutputType = {
    id_recommen: number | null
    id_group: number | null
    id_users: number | null
  }

  export type RecommendationCountAggregateOutputType = {
    id_recommen: number
    id_group: number
    id_users: number
    _all: number
  }


  export type RecommendationAvgAggregateInputType = {
    id_recommen?: true
    id_group?: true
    id_users?: true
  }

  export type RecommendationSumAggregateInputType = {
    id_recommen?: true
    id_group?: true
    id_users?: true
  }

  export type RecommendationMinAggregateInputType = {
    id_recommen?: true
    id_group?: true
    id_users?: true
  }

  export type RecommendationMaxAggregateInputType = {
    id_recommen?: true
    id_group?: true
    id_users?: true
  }

  export type RecommendationCountAggregateInputType = {
    id_recommen?: true
    id_group?: true
    id_users?: true
    _all?: true
  }

  export type RecommendationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which recommendation to aggregate.
     */
    where?: recommendationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of recommendations to fetch.
     */
    orderBy?: recommendationOrderByWithRelationInput | recommendationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: recommendationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` recommendations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` recommendations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned recommendations
    **/
    _count?: true | RecommendationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RecommendationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RecommendationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecommendationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecommendationMaxAggregateInputType
  }

  export type GetRecommendationAggregateType<T extends RecommendationAggregateArgs> = {
        [P in keyof T & keyof AggregateRecommendation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecommendation[P]>
      : GetScalarType<T[P], AggregateRecommendation[P]>
  }




  export type recommendationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: recommendationWhereInput
    orderBy?: recommendationOrderByWithAggregationInput | recommendationOrderByWithAggregationInput[]
    by: RecommendationScalarFieldEnum[] | RecommendationScalarFieldEnum
    having?: recommendationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecommendationCountAggregateInputType | true
    _avg?: RecommendationAvgAggregateInputType
    _sum?: RecommendationSumAggregateInputType
    _min?: RecommendationMinAggregateInputType
    _max?: RecommendationMaxAggregateInputType
  }

  export type RecommendationGroupByOutputType = {
    id_recommen: number
    id_group: number
    id_users: number
    _count: RecommendationCountAggregateOutputType | null
    _avg: RecommendationAvgAggregateOutputType | null
    _sum: RecommendationSumAggregateOutputType | null
    _min: RecommendationMinAggregateOutputType | null
    _max: RecommendationMaxAggregateOutputType | null
  }

  type GetRecommendationGroupByPayload<T extends recommendationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecommendationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecommendationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecommendationGroupByOutputType[P]>
            : GetScalarType<T[P], RecommendationGroupByOutputType[P]>
        }
      >
    >


  export type recommendationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_recommen?: boolean
    id_group?: boolean
    id_users?: boolean
  }, ExtArgs["result"]["recommendation"]>

  export type recommendationSelectScalar = {
    id_recommen?: boolean
    id_group?: boolean
    id_users?: boolean
  }


  export type $recommendationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "recommendation"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id_recommen: number
      id_group: number
      id_users: number
    }, ExtArgs["result"]["recommendation"]>
    composites: {}
  }


  type recommendationGetPayload<S extends boolean | null | undefined | recommendationDefaultArgs> = $Result.GetResult<Prisma.$recommendationPayload, S>

  type recommendationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<recommendationFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: RecommendationCountAggregateInputType | true
    }

  export interface recommendationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['recommendation'], meta: { name: 'recommendation' } }
    /**
     * Find zero or one Recommendation that matches the filter.
     * @param {recommendationFindUniqueArgs} args - Arguments to find a Recommendation
     * @example
     * // Get one Recommendation
     * const recommendation = await prisma.recommendation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends recommendationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, recommendationFindUniqueArgs<ExtArgs>>
    ): Prisma__recommendationClient<$Result.GetResult<Prisma.$recommendationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Recommendation that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {recommendationFindUniqueOrThrowArgs} args - Arguments to find a Recommendation
     * @example
     * // Get one Recommendation
     * const recommendation = await prisma.recommendation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends recommendationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, recommendationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__recommendationClient<$Result.GetResult<Prisma.$recommendationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Recommendation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recommendationFindFirstArgs} args - Arguments to find a Recommendation
     * @example
     * // Get one Recommendation
     * const recommendation = await prisma.recommendation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends recommendationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, recommendationFindFirstArgs<ExtArgs>>
    ): Prisma__recommendationClient<$Result.GetResult<Prisma.$recommendationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Recommendation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recommendationFindFirstOrThrowArgs} args - Arguments to find a Recommendation
     * @example
     * // Get one Recommendation
     * const recommendation = await prisma.recommendation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends recommendationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, recommendationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__recommendationClient<$Result.GetResult<Prisma.$recommendationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Recommendations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recommendationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Recommendations
     * const recommendations = await prisma.recommendation.findMany()
     * 
     * // Get first 10 Recommendations
     * const recommendations = await prisma.recommendation.findMany({ take: 10 })
     * 
     * // Only select the `id_recommen`
     * const recommendationWithId_recommenOnly = await prisma.recommendation.findMany({ select: { id_recommen: true } })
     * 
    **/
    findMany<T extends recommendationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, recommendationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$recommendationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Recommendation.
     * @param {recommendationCreateArgs} args - Arguments to create a Recommendation.
     * @example
     * // Create one Recommendation
     * const Recommendation = await prisma.recommendation.create({
     *   data: {
     *     // ... data to create a Recommendation
     *   }
     * })
     * 
    **/
    create<T extends recommendationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, recommendationCreateArgs<ExtArgs>>
    ): Prisma__recommendationClient<$Result.GetResult<Prisma.$recommendationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Recommendations.
     *     @param {recommendationCreateManyArgs} args - Arguments to create many Recommendations.
     *     @example
     *     // Create many Recommendations
     *     const recommendation = await prisma.recommendation.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends recommendationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, recommendationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Recommendation.
     * @param {recommendationDeleteArgs} args - Arguments to delete one Recommendation.
     * @example
     * // Delete one Recommendation
     * const Recommendation = await prisma.recommendation.delete({
     *   where: {
     *     // ... filter to delete one Recommendation
     *   }
     * })
     * 
    **/
    delete<T extends recommendationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, recommendationDeleteArgs<ExtArgs>>
    ): Prisma__recommendationClient<$Result.GetResult<Prisma.$recommendationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Recommendation.
     * @param {recommendationUpdateArgs} args - Arguments to update one Recommendation.
     * @example
     * // Update one Recommendation
     * const recommendation = await prisma.recommendation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends recommendationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, recommendationUpdateArgs<ExtArgs>>
    ): Prisma__recommendationClient<$Result.GetResult<Prisma.$recommendationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Recommendations.
     * @param {recommendationDeleteManyArgs} args - Arguments to filter Recommendations to delete.
     * @example
     * // Delete a few Recommendations
     * const { count } = await prisma.recommendation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends recommendationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, recommendationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recommendations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recommendationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Recommendations
     * const recommendation = await prisma.recommendation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends recommendationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, recommendationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Recommendation.
     * @param {recommendationUpsertArgs} args - Arguments to update or create a Recommendation.
     * @example
     * // Update or create a Recommendation
     * const recommendation = await prisma.recommendation.upsert({
     *   create: {
     *     // ... data to create a Recommendation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Recommendation we want to update
     *   }
     * })
    **/
    upsert<T extends recommendationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, recommendationUpsertArgs<ExtArgs>>
    ): Prisma__recommendationClient<$Result.GetResult<Prisma.$recommendationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Recommendations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recommendationCountArgs} args - Arguments to filter Recommendations to count.
     * @example
     * // Count the number of Recommendations
     * const count = await prisma.recommendation.count({
     *   where: {
     *     // ... the filter for the Recommendations we want to count
     *   }
     * })
    **/
    count<T extends recommendationCountArgs>(
      args?: Subset<T, recommendationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecommendationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Recommendation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecommendationAggregateArgs>(args: Subset<T, RecommendationAggregateArgs>): Prisma.PrismaPromise<GetRecommendationAggregateType<T>>

    /**
     * Group by Recommendation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {recommendationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends recommendationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: recommendationGroupByArgs['orderBy'] }
        : { orderBy?: recommendationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, recommendationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecommendationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the recommendation model
   */
  readonly fields: recommendationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for recommendation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__recommendationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the recommendation model
   */ 
  interface recommendationFieldRefs {
    readonly id_recommen: FieldRef<"recommendation", 'Int'>
    readonly id_group: FieldRef<"recommendation", 'Int'>
    readonly id_users: FieldRef<"recommendation", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * recommendation findUnique
   */
  export type recommendationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recommendation
     */
    select?: recommendationSelect<ExtArgs> | null
    /**
     * Filter, which recommendation to fetch.
     */
    where: recommendationWhereUniqueInput
  }


  /**
   * recommendation findUniqueOrThrow
   */
  export type recommendationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recommendation
     */
    select?: recommendationSelect<ExtArgs> | null
    /**
     * Filter, which recommendation to fetch.
     */
    where: recommendationWhereUniqueInput
  }


  /**
   * recommendation findFirst
   */
  export type recommendationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recommendation
     */
    select?: recommendationSelect<ExtArgs> | null
    /**
     * Filter, which recommendation to fetch.
     */
    where?: recommendationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of recommendations to fetch.
     */
    orderBy?: recommendationOrderByWithRelationInput | recommendationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for recommendations.
     */
    cursor?: recommendationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` recommendations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` recommendations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of recommendations.
     */
    distinct?: RecommendationScalarFieldEnum | RecommendationScalarFieldEnum[]
  }


  /**
   * recommendation findFirstOrThrow
   */
  export type recommendationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recommendation
     */
    select?: recommendationSelect<ExtArgs> | null
    /**
     * Filter, which recommendation to fetch.
     */
    where?: recommendationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of recommendations to fetch.
     */
    orderBy?: recommendationOrderByWithRelationInput | recommendationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for recommendations.
     */
    cursor?: recommendationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` recommendations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` recommendations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of recommendations.
     */
    distinct?: RecommendationScalarFieldEnum | RecommendationScalarFieldEnum[]
  }


  /**
   * recommendation findMany
   */
  export type recommendationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recommendation
     */
    select?: recommendationSelect<ExtArgs> | null
    /**
     * Filter, which recommendations to fetch.
     */
    where?: recommendationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of recommendations to fetch.
     */
    orderBy?: recommendationOrderByWithRelationInput | recommendationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing recommendations.
     */
    cursor?: recommendationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` recommendations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` recommendations.
     */
    skip?: number
    distinct?: RecommendationScalarFieldEnum | RecommendationScalarFieldEnum[]
  }


  /**
   * recommendation create
   */
  export type recommendationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recommendation
     */
    select?: recommendationSelect<ExtArgs> | null
    /**
     * The data needed to create a recommendation.
     */
    data: XOR<recommendationCreateInput, recommendationUncheckedCreateInput>
  }


  /**
   * recommendation createMany
   */
  export type recommendationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many recommendations.
     */
    data: recommendationCreateManyInput | recommendationCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * recommendation update
   */
  export type recommendationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recommendation
     */
    select?: recommendationSelect<ExtArgs> | null
    /**
     * The data needed to update a recommendation.
     */
    data: XOR<recommendationUpdateInput, recommendationUncheckedUpdateInput>
    /**
     * Choose, which recommendation to update.
     */
    where: recommendationWhereUniqueInput
  }


  /**
   * recommendation updateMany
   */
  export type recommendationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update recommendations.
     */
    data: XOR<recommendationUpdateManyMutationInput, recommendationUncheckedUpdateManyInput>
    /**
     * Filter which recommendations to update
     */
    where?: recommendationWhereInput
  }


  /**
   * recommendation upsert
   */
  export type recommendationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recommendation
     */
    select?: recommendationSelect<ExtArgs> | null
    /**
     * The filter to search for the recommendation to update in case it exists.
     */
    where: recommendationWhereUniqueInput
    /**
     * In case the recommendation found by the `where` argument doesn't exist, create a new recommendation with this data.
     */
    create: XOR<recommendationCreateInput, recommendationUncheckedCreateInput>
    /**
     * In case the recommendation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<recommendationUpdateInput, recommendationUncheckedUpdateInput>
  }


  /**
   * recommendation delete
   */
  export type recommendationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recommendation
     */
    select?: recommendationSelect<ExtArgs> | null
    /**
     * Filter which recommendation to delete.
     */
    where: recommendationWhereUniqueInput
  }


  /**
   * recommendation deleteMany
   */
  export type recommendationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which recommendations to delete
     */
    where?: recommendationWhereInput
  }


  /**
   * recommendation without action
   */
  export type recommendationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the recommendation
     */
    select?: recommendationSelect<ExtArgs> | null
  }



  /**
   * Model responses
   */

  export type AggregateResponses = {
    _count: ResponsesCountAggregateOutputType | null
    _avg: ResponsesAvgAggregateOutputType | null
    _sum: ResponsesSumAggregateOutputType | null
    _min: ResponsesMinAggregateOutputType | null
    _max: ResponsesMaxAggregateOutputType | null
  }

  export type ResponsesAvgAggregateOutputType = {
    id_responses: number | null
    id_users: number | null
    id_choice: number | null
  }

  export type ResponsesSumAggregateOutputType = {
    id_responses: number | null
    id_users: number | null
    id_choice: number | null
  }

  export type ResponsesMinAggregateOutputType = {
    id_responses: number | null
    id_users: number | null
    id_choice: number | null
  }

  export type ResponsesMaxAggregateOutputType = {
    id_responses: number | null
    id_users: number | null
    id_choice: number | null
  }

  export type ResponsesCountAggregateOutputType = {
    id_responses: number
    id_users: number
    id_choice: number
    _all: number
  }


  export type ResponsesAvgAggregateInputType = {
    id_responses?: true
    id_users?: true
    id_choice?: true
  }

  export type ResponsesSumAggregateInputType = {
    id_responses?: true
    id_users?: true
    id_choice?: true
  }

  export type ResponsesMinAggregateInputType = {
    id_responses?: true
    id_users?: true
    id_choice?: true
  }

  export type ResponsesMaxAggregateInputType = {
    id_responses?: true
    id_users?: true
    id_choice?: true
  }

  export type ResponsesCountAggregateInputType = {
    id_responses?: true
    id_users?: true
    id_choice?: true
    _all?: true
  }

  export type ResponsesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which responses to aggregate.
     */
    where?: responsesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of responses to fetch.
     */
    orderBy?: responsesOrderByWithRelationInput | responsesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: responsesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` responses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` responses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned responses
    **/
    _count?: true | ResponsesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ResponsesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ResponsesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResponsesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResponsesMaxAggregateInputType
  }

  export type GetResponsesAggregateType<T extends ResponsesAggregateArgs> = {
        [P in keyof T & keyof AggregateResponses]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResponses[P]>
      : GetScalarType<T[P], AggregateResponses[P]>
  }




  export type responsesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: responsesWhereInput
    orderBy?: responsesOrderByWithAggregationInput | responsesOrderByWithAggregationInput[]
    by: ResponsesScalarFieldEnum[] | ResponsesScalarFieldEnum
    having?: responsesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResponsesCountAggregateInputType | true
    _avg?: ResponsesAvgAggregateInputType
    _sum?: ResponsesSumAggregateInputType
    _min?: ResponsesMinAggregateInputType
    _max?: ResponsesMaxAggregateInputType
  }

  export type ResponsesGroupByOutputType = {
    id_responses: number
    id_users: number
    id_choice: number
    _count: ResponsesCountAggregateOutputType | null
    _avg: ResponsesAvgAggregateOutputType | null
    _sum: ResponsesSumAggregateOutputType | null
    _min: ResponsesMinAggregateOutputType | null
    _max: ResponsesMaxAggregateOutputType | null
  }

  type GetResponsesGroupByPayload<T extends responsesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResponsesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResponsesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResponsesGroupByOutputType[P]>
            : GetScalarType<T[P], ResponsesGroupByOutputType[P]>
        }
      >
    >


  export type responsesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_responses?: boolean
    id_users?: boolean
    id_choice?: boolean
  }, ExtArgs["result"]["responses"]>

  export type responsesSelectScalar = {
    id_responses?: boolean
    id_users?: boolean
    id_choice?: boolean
  }


  export type $responsesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "responses"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id_responses: number
      id_users: number
      id_choice: number
    }, ExtArgs["result"]["responses"]>
    composites: {}
  }


  type responsesGetPayload<S extends boolean | null | undefined | responsesDefaultArgs> = $Result.GetResult<Prisma.$responsesPayload, S>

  type responsesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<responsesFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ResponsesCountAggregateInputType | true
    }

  export interface responsesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['responses'], meta: { name: 'responses' } }
    /**
     * Find zero or one Responses that matches the filter.
     * @param {responsesFindUniqueArgs} args - Arguments to find a Responses
     * @example
     * // Get one Responses
     * const responses = await prisma.responses.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends responsesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, responsesFindUniqueArgs<ExtArgs>>
    ): Prisma__responsesClient<$Result.GetResult<Prisma.$responsesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Responses that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {responsesFindUniqueOrThrowArgs} args - Arguments to find a Responses
     * @example
     * // Get one Responses
     * const responses = await prisma.responses.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends responsesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, responsesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__responsesClient<$Result.GetResult<Prisma.$responsesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Responses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {responsesFindFirstArgs} args - Arguments to find a Responses
     * @example
     * // Get one Responses
     * const responses = await prisma.responses.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends responsesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, responsesFindFirstArgs<ExtArgs>>
    ): Prisma__responsesClient<$Result.GetResult<Prisma.$responsesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Responses that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {responsesFindFirstOrThrowArgs} args - Arguments to find a Responses
     * @example
     * // Get one Responses
     * const responses = await prisma.responses.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends responsesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, responsesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__responsesClient<$Result.GetResult<Prisma.$responsesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Responses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {responsesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Responses
     * const responses = await prisma.responses.findMany()
     * 
     * // Get first 10 Responses
     * const responses = await prisma.responses.findMany({ take: 10 })
     * 
     * // Only select the `id_responses`
     * const responsesWithId_responsesOnly = await prisma.responses.findMany({ select: { id_responses: true } })
     * 
    **/
    findMany<T extends responsesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, responsesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$responsesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Responses.
     * @param {responsesCreateArgs} args - Arguments to create a Responses.
     * @example
     * // Create one Responses
     * const Responses = await prisma.responses.create({
     *   data: {
     *     // ... data to create a Responses
     *   }
     * })
     * 
    **/
    create<T extends responsesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, responsesCreateArgs<ExtArgs>>
    ): Prisma__responsesClient<$Result.GetResult<Prisma.$responsesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Responses.
     *     @param {responsesCreateManyArgs} args - Arguments to create many Responses.
     *     @example
     *     // Create many Responses
     *     const responses = await prisma.responses.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends responsesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, responsesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Responses.
     * @param {responsesDeleteArgs} args - Arguments to delete one Responses.
     * @example
     * // Delete one Responses
     * const Responses = await prisma.responses.delete({
     *   where: {
     *     // ... filter to delete one Responses
     *   }
     * })
     * 
    **/
    delete<T extends responsesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, responsesDeleteArgs<ExtArgs>>
    ): Prisma__responsesClient<$Result.GetResult<Prisma.$responsesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Responses.
     * @param {responsesUpdateArgs} args - Arguments to update one Responses.
     * @example
     * // Update one Responses
     * const responses = await prisma.responses.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends responsesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, responsesUpdateArgs<ExtArgs>>
    ): Prisma__responsesClient<$Result.GetResult<Prisma.$responsesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Responses.
     * @param {responsesDeleteManyArgs} args - Arguments to filter Responses to delete.
     * @example
     * // Delete a few Responses
     * const { count } = await prisma.responses.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends responsesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, responsesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Responses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {responsesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Responses
     * const responses = await prisma.responses.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends responsesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, responsesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Responses.
     * @param {responsesUpsertArgs} args - Arguments to update or create a Responses.
     * @example
     * // Update or create a Responses
     * const responses = await prisma.responses.upsert({
     *   create: {
     *     // ... data to create a Responses
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Responses we want to update
     *   }
     * })
    **/
    upsert<T extends responsesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, responsesUpsertArgs<ExtArgs>>
    ): Prisma__responsesClient<$Result.GetResult<Prisma.$responsesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Responses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {responsesCountArgs} args - Arguments to filter Responses to count.
     * @example
     * // Count the number of Responses
     * const count = await prisma.responses.count({
     *   where: {
     *     // ... the filter for the Responses we want to count
     *   }
     * })
    **/
    count<T extends responsesCountArgs>(
      args?: Subset<T, responsesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResponsesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Responses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponsesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResponsesAggregateArgs>(args: Subset<T, ResponsesAggregateArgs>): Prisma.PrismaPromise<GetResponsesAggregateType<T>>

    /**
     * Group by Responses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {responsesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends responsesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: responsesGroupByArgs['orderBy'] }
        : { orderBy?: responsesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, responsesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResponsesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the responses model
   */
  readonly fields: responsesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for responses.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__responsesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the responses model
   */ 
  interface responsesFieldRefs {
    readonly id_responses: FieldRef<"responses", 'Int'>
    readonly id_users: FieldRef<"responses", 'Int'>
    readonly id_choice: FieldRef<"responses", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * responses findUnique
   */
  export type responsesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the responses
     */
    select?: responsesSelect<ExtArgs> | null
    /**
     * Filter, which responses to fetch.
     */
    where: responsesWhereUniqueInput
  }


  /**
   * responses findUniqueOrThrow
   */
  export type responsesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the responses
     */
    select?: responsesSelect<ExtArgs> | null
    /**
     * Filter, which responses to fetch.
     */
    where: responsesWhereUniqueInput
  }


  /**
   * responses findFirst
   */
  export type responsesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the responses
     */
    select?: responsesSelect<ExtArgs> | null
    /**
     * Filter, which responses to fetch.
     */
    where?: responsesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of responses to fetch.
     */
    orderBy?: responsesOrderByWithRelationInput | responsesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for responses.
     */
    cursor?: responsesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` responses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` responses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of responses.
     */
    distinct?: ResponsesScalarFieldEnum | ResponsesScalarFieldEnum[]
  }


  /**
   * responses findFirstOrThrow
   */
  export type responsesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the responses
     */
    select?: responsesSelect<ExtArgs> | null
    /**
     * Filter, which responses to fetch.
     */
    where?: responsesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of responses to fetch.
     */
    orderBy?: responsesOrderByWithRelationInput | responsesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for responses.
     */
    cursor?: responsesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` responses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` responses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of responses.
     */
    distinct?: ResponsesScalarFieldEnum | ResponsesScalarFieldEnum[]
  }


  /**
   * responses findMany
   */
  export type responsesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the responses
     */
    select?: responsesSelect<ExtArgs> | null
    /**
     * Filter, which responses to fetch.
     */
    where?: responsesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of responses to fetch.
     */
    orderBy?: responsesOrderByWithRelationInput | responsesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing responses.
     */
    cursor?: responsesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` responses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` responses.
     */
    skip?: number
    distinct?: ResponsesScalarFieldEnum | ResponsesScalarFieldEnum[]
  }


  /**
   * responses create
   */
  export type responsesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the responses
     */
    select?: responsesSelect<ExtArgs> | null
    /**
     * The data needed to create a responses.
     */
    data: XOR<responsesCreateInput, responsesUncheckedCreateInput>
  }


  /**
   * responses createMany
   */
  export type responsesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many responses.
     */
    data: responsesCreateManyInput | responsesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * responses update
   */
  export type responsesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the responses
     */
    select?: responsesSelect<ExtArgs> | null
    /**
     * The data needed to update a responses.
     */
    data: XOR<responsesUpdateInput, responsesUncheckedUpdateInput>
    /**
     * Choose, which responses to update.
     */
    where: responsesWhereUniqueInput
  }


  /**
   * responses updateMany
   */
  export type responsesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update responses.
     */
    data: XOR<responsesUpdateManyMutationInput, responsesUncheckedUpdateManyInput>
    /**
     * Filter which responses to update
     */
    where?: responsesWhereInput
  }


  /**
   * responses upsert
   */
  export type responsesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the responses
     */
    select?: responsesSelect<ExtArgs> | null
    /**
     * The filter to search for the responses to update in case it exists.
     */
    where: responsesWhereUniqueInput
    /**
     * In case the responses found by the `where` argument doesn't exist, create a new responses with this data.
     */
    create: XOR<responsesCreateInput, responsesUncheckedCreateInput>
    /**
     * In case the responses was found with the provided `where` argument, update it with this data.
     */
    update: XOR<responsesUpdateInput, responsesUncheckedUpdateInput>
  }


  /**
   * responses delete
   */
  export type responsesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the responses
     */
    select?: responsesSelect<ExtArgs> | null
    /**
     * Filter which responses to delete.
     */
    where: responsesWhereUniqueInput
  }


  /**
   * responses deleteMany
   */
  export type responsesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which responses to delete
     */
    where?: responsesWhereInput
  }


  /**
   * responses without action
   */
  export type responsesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the responses
     */
    select?: responsesSelect<ExtArgs> | null
  }



  /**
   * Model trip
   */

  export type AggregateTrip = {
    _count: TripCountAggregateOutputType | null
    _avg: TripAvgAggregateOutputType | null
    _sum: TripSumAggregateOutputType | null
    _min: TripMinAggregateOutputType | null
    _max: TripMaxAggregateOutputType | null
  }

  export type TripAvgAggregateOutputType = {
    id_trip: number | null
    id_group: number | null
  }

  export type TripSumAggregateOutputType = {
    id_trip: number | null
    id_group: number | null
  }

  export type TripMinAggregateOutputType = {
    id_trip: number | null
    trip_name: string | null
    trip_description: string | null
    id_group: number | null
  }

  export type TripMaxAggregateOutputType = {
    id_trip: number | null
    trip_name: string | null
    trip_description: string | null
    id_group: number | null
  }

  export type TripCountAggregateOutputType = {
    id_trip: number
    trip_name: number
    trip_description: number
    id_group: number
    _all: number
  }


  export type TripAvgAggregateInputType = {
    id_trip?: true
    id_group?: true
  }

  export type TripSumAggregateInputType = {
    id_trip?: true
    id_group?: true
  }

  export type TripMinAggregateInputType = {
    id_trip?: true
    trip_name?: true
    trip_description?: true
    id_group?: true
  }

  export type TripMaxAggregateInputType = {
    id_trip?: true
    trip_name?: true
    trip_description?: true
    id_group?: true
  }

  export type TripCountAggregateInputType = {
    id_trip?: true
    trip_name?: true
    trip_description?: true
    id_group?: true
    _all?: true
  }

  export type TripAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which trip to aggregate.
     */
    where?: tripWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of trips to fetch.
     */
    orderBy?: tripOrderByWithRelationInput | tripOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tripWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` trips from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` trips.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned trips
    **/
    _count?: true | TripCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TripAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TripSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TripMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TripMaxAggregateInputType
  }

  export type GetTripAggregateType<T extends TripAggregateArgs> = {
        [P in keyof T & keyof AggregateTrip]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrip[P]>
      : GetScalarType<T[P], AggregateTrip[P]>
  }




  export type tripGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tripWhereInput
    orderBy?: tripOrderByWithAggregationInput | tripOrderByWithAggregationInput[]
    by: TripScalarFieldEnum[] | TripScalarFieldEnum
    having?: tripScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TripCountAggregateInputType | true
    _avg?: TripAvgAggregateInputType
    _sum?: TripSumAggregateInputType
    _min?: TripMinAggregateInputType
    _max?: TripMaxAggregateInputType
  }

  export type TripGroupByOutputType = {
    id_trip: number
    trip_name: string
    trip_description: string
    id_group: number
    _count: TripCountAggregateOutputType | null
    _avg: TripAvgAggregateOutputType | null
    _sum: TripSumAggregateOutputType | null
    _min: TripMinAggregateOutputType | null
    _max: TripMaxAggregateOutputType | null
  }

  type GetTripGroupByPayload<T extends tripGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TripGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TripGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TripGroupByOutputType[P]>
            : GetScalarType<T[P], TripGroupByOutputType[P]>
        }
      >
    >


  export type tripSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_trip?: boolean
    trip_name?: boolean
    trip_description?: boolean
    id_group?: boolean
  }, ExtArgs["result"]["trip"]>

  export type tripSelectScalar = {
    id_trip?: boolean
    trip_name?: boolean
    trip_description?: boolean
    id_group?: boolean
  }


  export type $tripPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "trip"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id_trip: number
      trip_name: string
      trip_description: string
      id_group: number
    }, ExtArgs["result"]["trip"]>
    composites: {}
  }


  type tripGetPayload<S extends boolean | null | undefined | tripDefaultArgs> = $Result.GetResult<Prisma.$tripPayload, S>

  type tripCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<tripFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: TripCountAggregateInputType | true
    }

  export interface tripDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['trip'], meta: { name: 'trip' } }
    /**
     * Find zero or one Trip that matches the filter.
     * @param {tripFindUniqueArgs} args - Arguments to find a Trip
     * @example
     * // Get one Trip
     * const trip = await prisma.trip.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tripFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, tripFindUniqueArgs<ExtArgs>>
    ): Prisma__tripClient<$Result.GetResult<Prisma.$tripPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Trip that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {tripFindUniqueOrThrowArgs} args - Arguments to find a Trip
     * @example
     * // Get one Trip
     * const trip = await prisma.trip.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends tripFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, tripFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__tripClient<$Result.GetResult<Prisma.$tripPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Trip that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tripFindFirstArgs} args - Arguments to find a Trip
     * @example
     * // Get one Trip
     * const trip = await prisma.trip.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tripFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, tripFindFirstArgs<ExtArgs>>
    ): Prisma__tripClient<$Result.GetResult<Prisma.$tripPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Trip that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tripFindFirstOrThrowArgs} args - Arguments to find a Trip
     * @example
     * // Get one Trip
     * const trip = await prisma.trip.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends tripFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, tripFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__tripClient<$Result.GetResult<Prisma.$tripPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Trips that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tripFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Trips
     * const trips = await prisma.trip.findMany()
     * 
     * // Get first 10 Trips
     * const trips = await prisma.trip.findMany({ take: 10 })
     * 
     * // Only select the `id_trip`
     * const tripWithId_tripOnly = await prisma.trip.findMany({ select: { id_trip: true } })
     * 
    **/
    findMany<T extends tripFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, tripFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tripPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Trip.
     * @param {tripCreateArgs} args - Arguments to create a Trip.
     * @example
     * // Create one Trip
     * const Trip = await prisma.trip.create({
     *   data: {
     *     // ... data to create a Trip
     *   }
     * })
     * 
    **/
    create<T extends tripCreateArgs<ExtArgs>>(
      args: SelectSubset<T, tripCreateArgs<ExtArgs>>
    ): Prisma__tripClient<$Result.GetResult<Prisma.$tripPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Trips.
     *     @param {tripCreateManyArgs} args - Arguments to create many Trips.
     *     @example
     *     // Create many Trips
     *     const trip = await prisma.trip.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tripCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, tripCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Trip.
     * @param {tripDeleteArgs} args - Arguments to delete one Trip.
     * @example
     * // Delete one Trip
     * const Trip = await prisma.trip.delete({
     *   where: {
     *     // ... filter to delete one Trip
     *   }
     * })
     * 
    **/
    delete<T extends tripDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, tripDeleteArgs<ExtArgs>>
    ): Prisma__tripClient<$Result.GetResult<Prisma.$tripPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Trip.
     * @param {tripUpdateArgs} args - Arguments to update one Trip.
     * @example
     * // Update one Trip
     * const trip = await prisma.trip.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tripUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, tripUpdateArgs<ExtArgs>>
    ): Prisma__tripClient<$Result.GetResult<Prisma.$tripPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Trips.
     * @param {tripDeleteManyArgs} args - Arguments to filter Trips to delete.
     * @example
     * // Delete a few Trips
     * const { count } = await prisma.trip.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tripDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, tripDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Trips.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tripUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Trips
     * const trip = await prisma.trip.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tripUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, tripUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Trip.
     * @param {tripUpsertArgs} args - Arguments to update or create a Trip.
     * @example
     * // Update or create a Trip
     * const trip = await prisma.trip.upsert({
     *   create: {
     *     // ... data to create a Trip
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Trip we want to update
     *   }
     * })
    **/
    upsert<T extends tripUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, tripUpsertArgs<ExtArgs>>
    ): Prisma__tripClient<$Result.GetResult<Prisma.$tripPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Trips.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tripCountArgs} args - Arguments to filter Trips to count.
     * @example
     * // Count the number of Trips
     * const count = await prisma.trip.count({
     *   where: {
     *     // ... the filter for the Trips we want to count
     *   }
     * })
    **/
    count<T extends tripCountArgs>(
      args?: Subset<T, tripCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TripCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Trip.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TripAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TripAggregateArgs>(args: Subset<T, TripAggregateArgs>): Prisma.PrismaPromise<GetTripAggregateType<T>>

    /**
     * Group by Trip.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tripGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tripGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tripGroupByArgs['orderBy'] }
        : { orderBy?: tripGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tripGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTripGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the trip model
   */
  readonly fields: tripFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for trip.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__tripClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the trip model
   */ 
  interface tripFieldRefs {
    readonly id_trip: FieldRef<"trip", 'Int'>
    readonly trip_name: FieldRef<"trip", 'String'>
    readonly trip_description: FieldRef<"trip", 'String'>
    readonly id_group: FieldRef<"trip", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * trip findUnique
   */
  export type tripFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trip
     */
    select?: tripSelect<ExtArgs> | null
    /**
     * Filter, which trip to fetch.
     */
    where: tripWhereUniqueInput
  }


  /**
   * trip findUniqueOrThrow
   */
  export type tripFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trip
     */
    select?: tripSelect<ExtArgs> | null
    /**
     * Filter, which trip to fetch.
     */
    where: tripWhereUniqueInput
  }


  /**
   * trip findFirst
   */
  export type tripFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trip
     */
    select?: tripSelect<ExtArgs> | null
    /**
     * Filter, which trip to fetch.
     */
    where?: tripWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of trips to fetch.
     */
    orderBy?: tripOrderByWithRelationInput | tripOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for trips.
     */
    cursor?: tripWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` trips from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` trips.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of trips.
     */
    distinct?: TripScalarFieldEnum | TripScalarFieldEnum[]
  }


  /**
   * trip findFirstOrThrow
   */
  export type tripFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trip
     */
    select?: tripSelect<ExtArgs> | null
    /**
     * Filter, which trip to fetch.
     */
    where?: tripWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of trips to fetch.
     */
    orderBy?: tripOrderByWithRelationInput | tripOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for trips.
     */
    cursor?: tripWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` trips from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` trips.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of trips.
     */
    distinct?: TripScalarFieldEnum | TripScalarFieldEnum[]
  }


  /**
   * trip findMany
   */
  export type tripFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trip
     */
    select?: tripSelect<ExtArgs> | null
    /**
     * Filter, which trips to fetch.
     */
    where?: tripWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of trips to fetch.
     */
    orderBy?: tripOrderByWithRelationInput | tripOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing trips.
     */
    cursor?: tripWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` trips from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` trips.
     */
    skip?: number
    distinct?: TripScalarFieldEnum | TripScalarFieldEnum[]
  }


  /**
   * trip create
   */
  export type tripCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trip
     */
    select?: tripSelect<ExtArgs> | null
    /**
     * The data needed to create a trip.
     */
    data: XOR<tripCreateInput, tripUncheckedCreateInput>
  }


  /**
   * trip createMany
   */
  export type tripCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many trips.
     */
    data: tripCreateManyInput | tripCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * trip update
   */
  export type tripUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trip
     */
    select?: tripSelect<ExtArgs> | null
    /**
     * The data needed to update a trip.
     */
    data: XOR<tripUpdateInput, tripUncheckedUpdateInput>
    /**
     * Choose, which trip to update.
     */
    where: tripWhereUniqueInput
  }


  /**
   * trip updateMany
   */
  export type tripUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update trips.
     */
    data: XOR<tripUpdateManyMutationInput, tripUncheckedUpdateManyInput>
    /**
     * Filter which trips to update
     */
    where?: tripWhereInput
  }


  /**
   * trip upsert
   */
  export type tripUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trip
     */
    select?: tripSelect<ExtArgs> | null
    /**
     * The filter to search for the trip to update in case it exists.
     */
    where: tripWhereUniqueInput
    /**
     * In case the trip found by the `where` argument doesn't exist, create a new trip with this data.
     */
    create: XOR<tripCreateInput, tripUncheckedCreateInput>
    /**
     * In case the trip was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tripUpdateInput, tripUncheckedUpdateInput>
  }


  /**
   * trip delete
   */
  export type tripDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trip
     */
    select?: tripSelect<ExtArgs> | null
    /**
     * Filter which trip to delete.
     */
    where: tripWhereUniqueInput
  }


  /**
   * trip deleteMany
   */
  export type tripDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which trips to delete
     */
    where?: tripWhereInput
  }


  /**
   * trip without action
   */
  export type tripDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trip
     */
    select?: tripSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    password: 'password',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt',
    groupId: 'groupId'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const ChoiceScalarFieldEnum: {
    id_choice: 'id_choice',
    choice: 'choice',
    id_question: 'id_question'
  };

  export type ChoiceScalarFieldEnum = (typeof ChoiceScalarFieldEnum)[keyof typeof ChoiceScalarFieldEnum]


  export const Feedback_questionScalarFieldEnum: {
    id_feedback_q: 'id_feedback_q',
    question_feedback: 'question_feedback',
    question_rate: 'question_rate',
    id_recommen: 'id_recommen'
  };

  export type Feedback_questionScalarFieldEnum = (typeof Feedback_questionScalarFieldEnum)[keyof typeof Feedback_questionScalarFieldEnum]


  export const MgroupScalarFieldEnum: {
    id_group: 'id_group',
    group_name: 'group_name',
    group_description: 'group_description',
    image: 'image'
  };

  export type MgroupScalarFieldEnum = (typeof MgroupScalarFieldEnum)[keyof typeof MgroupScalarFieldEnum]


  export const QuestionnaireScalarFieldEnum: {
    id_question: 'id_question',
    question_topic: 'question_topic'
  };

  export type QuestionnaireScalarFieldEnum = (typeof QuestionnaireScalarFieldEnum)[keyof typeof QuestionnaireScalarFieldEnum]


  export const RecommendationScalarFieldEnum: {
    id_recommen: 'id_recommen',
    id_group: 'id_group',
    id_users: 'id_users'
  };

  export type RecommendationScalarFieldEnum = (typeof RecommendationScalarFieldEnum)[keyof typeof RecommendationScalarFieldEnum]


  export const ResponsesScalarFieldEnum: {
    id_responses: 'id_responses',
    id_users: 'id_users',
    id_choice: 'id_choice'
  };

  export type ResponsesScalarFieldEnum = (typeof ResponsesScalarFieldEnum)[keyof typeof ResponsesScalarFieldEnum]


  export const TripScalarFieldEnum: {
    id_trip: 'id_trip',
    trip_name: 'trip_name',
    trip_description: 'trip_description',
    id_group: 'id_group'
  };

  export type TripScalarFieldEnum = (typeof TripScalarFieldEnum)[keyof typeof TripScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    id?: IntFilter<"users"> | number
    email?: StringFilter<"users"> | string
    name?: StringNullableFilter<"users"> | string | null
    password?: StringFilter<"users"> | string
    role?: EnumRoleFilter<"users"> | $Enums.Role
    createdAt?: DateTimeFilter<"users"> | Date | string
    updatedAt?: DateTimeFilter<"users"> | Date | string
    deletedAt?: DateTimeNullableFilter<"users"> | Date | string | null
    groupId?: IntNullableFilter<"users"> | number | null
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    groupId?: SortOrderInput | SortOrder
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    name?: StringNullableFilter<"users"> | string | null
    password?: StringFilter<"users"> | string
    role?: EnumRoleFilter<"users"> | $Enums.Role
    createdAt?: DateTimeFilter<"users"> | Date | string
    updatedAt?: DateTimeFilter<"users"> | Date | string
    deletedAt?: DateTimeNullableFilter<"users"> | Date | string | null
    groupId?: IntNullableFilter<"users"> | number | null
  }, "id" | "email">

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    groupId?: SortOrderInput | SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"users"> | number
    email?: StringWithAggregatesFilter<"users"> | string
    name?: StringNullableWithAggregatesFilter<"users"> | string | null
    password?: StringWithAggregatesFilter<"users"> | string
    role?: EnumRoleWithAggregatesFilter<"users"> | $Enums.Role
    createdAt?: DateTimeWithAggregatesFilter<"users"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"users"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"users"> | Date | string | null
    groupId?: IntNullableWithAggregatesFilter<"users"> | number | null
  }

  export type choiceWhereInput = {
    AND?: choiceWhereInput | choiceWhereInput[]
    OR?: choiceWhereInput[]
    NOT?: choiceWhereInput | choiceWhereInput[]
    id_choice?: IntFilter<"choice"> | number
    choice?: StringFilter<"choice"> | string
    id_question?: IntFilter<"choice"> | number
  }

  export type choiceOrderByWithRelationInput = {
    id_choice?: SortOrder
    choice?: SortOrder
    id_question?: SortOrder
  }

  export type choiceWhereUniqueInput = Prisma.AtLeast<{
    id_choice?: number
    AND?: choiceWhereInput | choiceWhereInput[]
    OR?: choiceWhereInput[]
    NOT?: choiceWhereInput | choiceWhereInput[]
    choice?: StringFilter<"choice"> | string
    id_question?: IntFilter<"choice"> | number
  }, "id_choice">

  export type choiceOrderByWithAggregationInput = {
    id_choice?: SortOrder
    choice?: SortOrder
    id_question?: SortOrder
    _count?: choiceCountOrderByAggregateInput
    _avg?: choiceAvgOrderByAggregateInput
    _max?: choiceMaxOrderByAggregateInput
    _min?: choiceMinOrderByAggregateInput
    _sum?: choiceSumOrderByAggregateInput
  }

  export type choiceScalarWhereWithAggregatesInput = {
    AND?: choiceScalarWhereWithAggregatesInput | choiceScalarWhereWithAggregatesInput[]
    OR?: choiceScalarWhereWithAggregatesInput[]
    NOT?: choiceScalarWhereWithAggregatesInput | choiceScalarWhereWithAggregatesInput[]
    id_choice?: IntWithAggregatesFilter<"choice"> | number
    choice?: StringWithAggregatesFilter<"choice"> | string
    id_question?: IntWithAggregatesFilter<"choice"> | number
  }

  export type feedback_questionWhereInput = {
    AND?: feedback_questionWhereInput | feedback_questionWhereInput[]
    OR?: feedback_questionWhereInput[]
    NOT?: feedback_questionWhereInput | feedback_questionWhereInput[]
    id_feedback_q?: IntFilter<"feedback_question"> | number
    question_feedback?: StringFilter<"feedback_question"> | string
    question_rate?: IntFilter<"feedback_question"> | number
    id_recommen?: IntFilter<"feedback_question"> | number
  }

  export type feedback_questionOrderByWithRelationInput = {
    id_feedback_q?: SortOrder
    question_feedback?: SortOrder
    question_rate?: SortOrder
    id_recommen?: SortOrder
  }

  export type feedback_questionWhereUniqueInput = Prisma.AtLeast<{
    id_feedback_q?: number
    AND?: feedback_questionWhereInput | feedback_questionWhereInput[]
    OR?: feedback_questionWhereInput[]
    NOT?: feedback_questionWhereInput | feedback_questionWhereInput[]
    question_feedback?: StringFilter<"feedback_question"> | string
    question_rate?: IntFilter<"feedback_question"> | number
    id_recommen?: IntFilter<"feedback_question"> | number
  }, "id_feedback_q">

  export type feedback_questionOrderByWithAggregationInput = {
    id_feedback_q?: SortOrder
    question_feedback?: SortOrder
    question_rate?: SortOrder
    id_recommen?: SortOrder
    _count?: feedback_questionCountOrderByAggregateInput
    _avg?: feedback_questionAvgOrderByAggregateInput
    _max?: feedback_questionMaxOrderByAggregateInput
    _min?: feedback_questionMinOrderByAggregateInput
    _sum?: feedback_questionSumOrderByAggregateInput
  }

  export type feedback_questionScalarWhereWithAggregatesInput = {
    AND?: feedback_questionScalarWhereWithAggregatesInput | feedback_questionScalarWhereWithAggregatesInput[]
    OR?: feedback_questionScalarWhereWithAggregatesInput[]
    NOT?: feedback_questionScalarWhereWithAggregatesInput | feedback_questionScalarWhereWithAggregatesInput[]
    id_feedback_q?: IntWithAggregatesFilter<"feedback_question"> | number
    question_feedback?: StringWithAggregatesFilter<"feedback_question"> | string
    question_rate?: IntWithAggregatesFilter<"feedback_question"> | number
    id_recommen?: IntWithAggregatesFilter<"feedback_question"> | number
  }

  export type mgroupWhereInput = {
    AND?: mgroupWhereInput | mgroupWhereInput[]
    OR?: mgroupWhereInput[]
    NOT?: mgroupWhereInput | mgroupWhereInput[]
    id_group?: IntFilter<"mgroup"> | number
    group_name?: StringFilter<"mgroup"> | string
    group_description?: StringFilter<"mgroup"> | string
    image?: StringFilter<"mgroup"> | string
  }

  export type mgroupOrderByWithRelationInput = {
    id_group?: SortOrder
    group_name?: SortOrder
    group_description?: SortOrder
    image?: SortOrder
  }

  export type mgroupWhereUniqueInput = Prisma.AtLeast<{
    id_group?: number
    AND?: mgroupWhereInput | mgroupWhereInput[]
    OR?: mgroupWhereInput[]
    NOT?: mgroupWhereInput | mgroupWhereInput[]
    group_name?: StringFilter<"mgroup"> | string
    group_description?: StringFilter<"mgroup"> | string
    image?: StringFilter<"mgroup"> | string
  }, "id_group">

  export type mgroupOrderByWithAggregationInput = {
    id_group?: SortOrder
    group_name?: SortOrder
    group_description?: SortOrder
    image?: SortOrder
    _count?: mgroupCountOrderByAggregateInput
    _avg?: mgroupAvgOrderByAggregateInput
    _max?: mgroupMaxOrderByAggregateInput
    _min?: mgroupMinOrderByAggregateInput
    _sum?: mgroupSumOrderByAggregateInput
  }

  export type mgroupScalarWhereWithAggregatesInput = {
    AND?: mgroupScalarWhereWithAggregatesInput | mgroupScalarWhereWithAggregatesInput[]
    OR?: mgroupScalarWhereWithAggregatesInput[]
    NOT?: mgroupScalarWhereWithAggregatesInput | mgroupScalarWhereWithAggregatesInput[]
    id_group?: IntWithAggregatesFilter<"mgroup"> | number
    group_name?: StringWithAggregatesFilter<"mgroup"> | string
    group_description?: StringWithAggregatesFilter<"mgroup"> | string
    image?: StringWithAggregatesFilter<"mgroup"> | string
  }

  export type questionnaireWhereInput = {
    AND?: questionnaireWhereInput | questionnaireWhereInput[]
    OR?: questionnaireWhereInput[]
    NOT?: questionnaireWhereInput | questionnaireWhereInput[]
    id_question?: IntFilter<"questionnaire"> | number
    question_topic?: StringFilter<"questionnaire"> | string
  }

  export type questionnaireOrderByWithRelationInput = {
    id_question?: SortOrder
    question_topic?: SortOrder
  }

  export type questionnaireWhereUniqueInput = Prisma.AtLeast<{
    id_question?: number
    AND?: questionnaireWhereInput | questionnaireWhereInput[]
    OR?: questionnaireWhereInput[]
    NOT?: questionnaireWhereInput | questionnaireWhereInput[]
    question_topic?: StringFilter<"questionnaire"> | string
  }, "id_question">

  export type questionnaireOrderByWithAggregationInput = {
    id_question?: SortOrder
    question_topic?: SortOrder
    _count?: questionnaireCountOrderByAggregateInput
    _avg?: questionnaireAvgOrderByAggregateInput
    _max?: questionnaireMaxOrderByAggregateInput
    _min?: questionnaireMinOrderByAggregateInput
    _sum?: questionnaireSumOrderByAggregateInput
  }

  export type questionnaireScalarWhereWithAggregatesInput = {
    AND?: questionnaireScalarWhereWithAggregatesInput | questionnaireScalarWhereWithAggregatesInput[]
    OR?: questionnaireScalarWhereWithAggregatesInput[]
    NOT?: questionnaireScalarWhereWithAggregatesInput | questionnaireScalarWhereWithAggregatesInput[]
    id_question?: IntWithAggregatesFilter<"questionnaire"> | number
    question_topic?: StringWithAggregatesFilter<"questionnaire"> | string
  }

  export type recommendationWhereInput = {
    AND?: recommendationWhereInput | recommendationWhereInput[]
    OR?: recommendationWhereInput[]
    NOT?: recommendationWhereInput | recommendationWhereInput[]
    id_recommen?: IntFilter<"recommendation"> | number
    id_group?: IntFilter<"recommendation"> | number
    id_users?: IntFilter<"recommendation"> | number
  }

  export type recommendationOrderByWithRelationInput = {
    id_recommen?: SortOrder
    id_group?: SortOrder
    id_users?: SortOrder
  }

  export type recommendationWhereUniqueInput = Prisma.AtLeast<{
    id_recommen?: number
    AND?: recommendationWhereInput | recommendationWhereInput[]
    OR?: recommendationWhereInput[]
    NOT?: recommendationWhereInput | recommendationWhereInput[]
    id_group?: IntFilter<"recommendation"> | number
    id_users?: IntFilter<"recommendation"> | number
  }, "id_recommen">

  export type recommendationOrderByWithAggregationInput = {
    id_recommen?: SortOrder
    id_group?: SortOrder
    id_users?: SortOrder
    _count?: recommendationCountOrderByAggregateInput
    _avg?: recommendationAvgOrderByAggregateInput
    _max?: recommendationMaxOrderByAggregateInput
    _min?: recommendationMinOrderByAggregateInput
    _sum?: recommendationSumOrderByAggregateInput
  }

  export type recommendationScalarWhereWithAggregatesInput = {
    AND?: recommendationScalarWhereWithAggregatesInput | recommendationScalarWhereWithAggregatesInput[]
    OR?: recommendationScalarWhereWithAggregatesInput[]
    NOT?: recommendationScalarWhereWithAggregatesInput | recommendationScalarWhereWithAggregatesInput[]
    id_recommen?: IntWithAggregatesFilter<"recommendation"> | number
    id_group?: IntWithAggregatesFilter<"recommendation"> | number
    id_users?: IntWithAggregatesFilter<"recommendation"> | number
  }

  export type responsesWhereInput = {
    AND?: responsesWhereInput | responsesWhereInput[]
    OR?: responsesWhereInput[]
    NOT?: responsesWhereInput | responsesWhereInput[]
    id_responses?: IntFilter<"responses"> | number
    id_users?: IntFilter<"responses"> | number
    id_choice?: IntFilter<"responses"> | number
  }

  export type responsesOrderByWithRelationInput = {
    id_responses?: SortOrder
    id_users?: SortOrder
    id_choice?: SortOrder
  }

  export type responsesWhereUniqueInput = Prisma.AtLeast<{
    id_responses?: number
    AND?: responsesWhereInput | responsesWhereInput[]
    OR?: responsesWhereInput[]
    NOT?: responsesWhereInput | responsesWhereInput[]
    id_users?: IntFilter<"responses"> | number
    id_choice?: IntFilter<"responses"> | number
  }, "id_responses">

  export type responsesOrderByWithAggregationInput = {
    id_responses?: SortOrder
    id_users?: SortOrder
    id_choice?: SortOrder
    _count?: responsesCountOrderByAggregateInput
    _avg?: responsesAvgOrderByAggregateInput
    _max?: responsesMaxOrderByAggregateInput
    _min?: responsesMinOrderByAggregateInput
    _sum?: responsesSumOrderByAggregateInput
  }

  export type responsesScalarWhereWithAggregatesInput = {
    AND?: responsesScalarWhereWithAggregatesInput | responsesScalarWhereWithAggregatesInput[]
    OR?: responsesScalarWhereWithAggregatesInput[]
    NOT?: responsesScalarWhereWithAggregatesInput | responsesScalarWhereWithAggregatesInput[]
    id_responses?: IntWithAggregatesFilter<"responses"> | number
    id_users?: IntWithAggregatesFilter<"responses"> | number
    id_choice?: IntWithAggregatesFilter<"responses"> | number
  }

  export type tripWhereInput = {
    AND?: tripWhereInput | tripWhereInput[]
    OR?: tripWhereInput[]
    NOT?: tripWhereInput | tripWhereInput[]
    id_trip?: IntFilter<"trip"> | number
    trip_name?: StringFilter<"trip"> | string
    trip_description?: StringFilter<"trip"> | string
    id_group?: IntFilter<"trip"> | number
  }

  export type tripOrderByWithRelationInput = {
    id_trip?: SortOrder
    trip_name?: SortOrder
    trip_description?: SortOrder
    id_group?: SortOrder
  }

  export type tripWhereUniqueInput = Prisma.AtLeast<{
    id_trip?: number
    AND?: tripWhereInput | tripWhereInput[]
    OR?: tripWhereInput[]
    NOT?: tripWhereInput | tripWhereInput[]
    trip_name?: StringFilter<"trip"> | string
    trip_description?: StringFilter<"trip"> | string
    id_group?: IntFilter<"trip"> | number
  }, "id_trip">

  export type tripOrderByWithAggregationInput = {
    id_trip?: SortOrder
    trip_name?: SortOrder
    trip_description?: SortOrder
    id_group?: SortOrder
    _count?: tripCountOrderByAggregateInput
    _avg?: tripAvgOrderByAggregateInput
    _max?: tripMaxOrderByAggregateInput
    _min?: tripMinOrderByAggregateInput
    _sum?: tripSumOrderByAggregateInput
  }

  export type tripScalarWhereWithAggregatesInput = {
    AND?: tripScalarWhereWithAggregatesInput | tripScalarWhereWithAggregatesInput[]
    OR?: tripScalarWhereWithAggregatesInput[]
    NOT?: tripScalarWhereWithAggregatesInput | tripScalarWhereWithAggregatesInput[]
    id_trip?: IntWithAggregatesFilter<"trip"> | number
    trip_name?: StringWithAggregatesFilter<"trip"> | string
    trip_description?: StringWithAggregatesFilter<"trip"> | string
    id_group?: IntWithAggregatesFilter<"trip"> | number
  }

  export type usersCreateInput = {
    email: string
    name?: string | null
    password: string
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    groupId?: number | null
  }

  export type usersUncheckedCreateInput = {
    id?: number
    email: string
    name?: string | null
    password: string
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    groupId?: number | null
  }

  export type usersUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    groupId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type usersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    groupId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type usersCreateManyInput = {
    id?: number
    email: string
    name?: string | null
    password: string
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    groupId?: number | null
  }

  export type usersUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    groupId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type usersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    groupId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type choiceCreateInput = {
    choice: string
    id_question: number
  }

  export type choiceUncheckedCreateInput = {
    id_choice?: number
    choice: string
    id_question: number
  }

  export type choiceUpdateInput = {
    choice?: StringFieldUpdateOperationsInput | string
    id_question?: IntFieldUpdateOperationsInput | number
  }

  export type choiceUncheckedUpdateInput = {
    id_choice?: IntFieldUpdateOperationsInput | number
    choice?: StringFieldUpdateOperationsInput | string
    id_question?: IntFieldUpdateOperationsInput | number
  }

  export type choiceCreateManyInput = {
    id_choice?: number
    choice: string
    id_question: number
  }

  export type choiceUpdateManyMutationInput = {
    choice?: StringFieldUpdateOperationsInput | string
    id_question?: IntFieldUpdateOperationsInput | number
  }

  export type choiceUncheckedUpdateManyInput = {
    id_choice?: IntFieldUpdateOperationsInput | number
    choice?: StringFieldUpdateOperationsInput | string
    id_question?: IntFieldUpdateOperationsInput | number
  }

  export type feedback_questionCreateInput = {
    question_feedback: string
    question_rate: number
    id_recommen: number
  }

  export type feedback_questionUncheckedCreateInput = {
    id_feedback_q?: number
    question_feedback: string
    question_rate: number
    id_recommen: number
  }

  export type feedback_questionUpdateInput = {
    question_feedback?: StringFieldUpdateOperationsInput | string
    question_rate?: IntFieldUpdateOperationsInput | number
    id_recommen?: IntFieldUpdateOperationsInput | number
  }

  export type feedback_questionUncheckedUpdateInput = {
    id_feedback_q?: IntFieldUpdateOperationsInput | number
    question_feedback?: StringFieldUpdateOperationsInput | string
    question_rate?: IntFieldUpdateOperationsInput | number
    id_recommen?: IntFieldUpdateOperationsInput | number
  }

  export type feedback_questionCreateManyInput = {
    id_feedback_q?: number
    question_feedback: string
    question_rate: number
    id_recommen: number
  }

  export type feedback_questionUpdateManyMutationInput = {
    question_feedback?: StringFieldUpdateOperationsInput | string
    question_rate?: IntFieldUpdateOperationsInput | number
    id_recommen?: IntFieldUpdateOperationsInput | number
  }

  export type feedback_questionUncheckedUpdateManyInput = {
    id_feedback_q?: IntFieldUpdateOperationsInput | number
    question_feedback?: StringFieldUpdateOperationsInput | string
    question_rate?: IntFieldUpdateOperationsInput | number
    id_recommen?: IntFieldUpdateOperationsInput | number
  }

  export type mgroupCreateInput = {
    group_name: string
    group_description: string
    image: string
  }

  export type mgroupUncheckedCreateInput = {
    id_group?: number
    group_name: string
    group_description: string
    image: string
  }

  export type mgroupUpdateInput = {
    group_name?: StringFieldUpdateOperationsInput | string
    group_description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type mgroupUncheckedUpdateInput = {
    id_group?: IntFieldUpdateOperationsInput | number
    group_name?: StringFieldUpdateOperationsInput | string
    group_description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type mgroupCreateManyInput = {
    id_group?: number
    group_name: string
    group_description: string
    image: string
  }

  export type mgroupUpdateManyMutationInput = {
    group_name?: StringFieldUpdateOperationsInput | string
    group_description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type mgroupUncheckedUpdateManyInput = {
    id_group?: IntFieldUpdateOperationsInput | number
    group_name?: StringFieldUpdateOperationsInput | string
    group_description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type questionnaireCreateInput = {
    question_topic: string
  }

  export type questionnaireUncheckedCreateInput = {
    id_question?: number
    question_topic: string
  }

  export type questionnaireUpdateInput = {
    question_topic?: StringFieldUpdateOperationsInput | string
  }

  export type questionnaireUncheckedUpdateInput = {
    id_question?: IntFieldUpdateOperationsInput | number
    question_topic?: StringFieldUpdateOperationsInput | string
  }

  export type questionnaireCreateManyInput = {
    id_question?: number
    question_topic: string
  }

  export type questionnaireUpdateManyMutationInput = {
    question_topic?: StringFieldUpdateOperationsInput | string
  }

  export type questionnaireUncheckedUpdateManyInput = {
    id_question?: IntFieldUpdateOperationsInput | number
    question_topic?: StringFieldUpdateOperationsInput | string
  }

  export type recommendationCreateInput = {
    id_group: number
    id_users: number
  }

  export type recommendationUncheckedCreateInput = {
    id_recommen?: number
    id_group: number
    id_users: number
  }

  export type recommendationUpdateInput = {
    id_group?: IntFieldUpdateOperationsInput | number
    id_users?: IntFieldUpdateOperationsInput | number
  }

  export type recommendationUncheckedUpdateInput = {
    id_recommen?: IntFieldUpdateOperationsInput | number
    id_group?: IntFieldUpdateOperationsInput | number
    id_users?: IntFieldUpdateOperationsInput | number
  }

  export type recommendationCreateManyInput = {
    id_recommen?: number
    id_group: number
    id_users: number
  }

  export type recommendationUpdateManyMutationInput = {
    id_group?: IntFieldUpdateOperationsInput | number
    id_users?: IntFieldUpdateOperationsInput | number
  }

  export type recommendationUncheckedUpdateManyInput = {
    id_recommen?: IntFieldUpdateOperationsInput | number
    id_group?: IntFieldUpdateOperationsInput | number
    id_users?: IntFieldUpdateOperationsInput | number
  }

  export type responsesCreateInput = {
    id_users: number
    id_choice: number
  }

  export type responsesUncheckedCreateInput = {
    id_responses?: number
    id_users: number
    id_choice: number
  }

  export type responsesUpdateInput = {
    id_users?: IntFieldUpdateOperationsInput | number
    id_choice?: IntFieldUpdateOperationsInput | number
  }

  export type responsesUncheckedUpdateInput = {
    id_responses?: IntFieldUpdateOperationsInput | number
    id_users?: IntFieldUpdateOperationsInput | number
    id_choice?: IntFieldUpdateOperationsInput | number
  }

  export type responsesCreateManyInput = {
    id_responses?: number
    id_users: number
    id_choice: number
  }

  export type responsesUpdateManyMutationInput = {
    id_users?: IntFieldUpdateOperationsInput | number
    id_choice?: IntFieldUpdateOperationsInput | number
  }

  export type responsesUncheckedUpdateManyInput = {
    id_responses?: IntFieldUpdateOperationsInput | number
    id_users?: IntFieldUpdateOperationsInput | number
    id_choice?: IntFieldUpdateOperationsInput | number
  }

  export type tripCreateInput = {
    trip_name: string
    trip_description: string
    id_group: number
  }

  export type tripUncheckedCreateInput = {
    id_trip?: number
    trip_name: string
    trip_description: string
    id_group: number
  }

  export type tripUpdateInput = {
    trip_name?: StringFieldUpdateOperationsInput | string
    trip_description?: StringFieldUpdateOperationsInput | string
    id_group?: IntFieldUpdateOperationsInput | number
  }

  export type tripUncheckedUpdateInput = {
    id_trip?: IntFieldUpdateOperationsInput | number
    trip_name?: StringFieldUpdateOperationsInput | string
    trip_description?: StringFieldUpdateOperationsInput | string
    id_group?: IntFieldUpdateOperationsInput | number
  }

  export type tripCreateManyInput = {
    id_trip?: number
    trip_name: string
    trip_description: string
    id_group: number
  }

  export type tripUpdateManyMutationInput = {
    trip_name?: StringFieldUpdateOperationsInput | string
    trip_description?: StringFieldUpdateOperationsInput | string
    id_group?: IntFieldUpdateOperationsInput | number
  }

  export type tripUncheckedUpdateManyInput = {
    id_trip?: IntFieldUpdateOperationsInput | number
    trip_name?: StringFieldUpdateOperationsInput | string
    trip_description?: StringFieldUpdateOperationsInput | string
    id_group?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    groupId?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    id?: SortOrder
    groupId?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    groupId?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    groupId?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    id?: SortOrder
    groupId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type choiceCountOrderByAggregateInput = {
    id_choice?: SortOrder
    choice?: SortOrder
    id_question?: SortOrder
  }

  export type choiceAvgOrderByAggregateInput = {
    id_choice?: SortOrder
    id_question?: SortOrder
  }

  export type choiceMaxOrderByAggregateInput = {
    id_choice?: SortOrder
    choice?: SortOrder
    id_question?: SortOrder
  }

  export type choiceMinOrderByAggregateInput = {
    id_choice?: SortOrder
    choice?: SortOrder
    id_question?: SortOrder
  }

  export type choiceSumOrderByAggregateInput = {
    id_choice?: SortOrder
    id_question?: SortOrder
  }

  export type feedback_questionCountOrderByAggregateInput = {
    id_feedback_q?: SortOrder
    question_feedback?: SortOrder
    question_rate?: SortOrder
    id_recommen?: SortOrder
  }

  export type feedback_questionAvgOrderByAggregateInput = {
    id_feedback_q?: SortOrder
    question_rate?: SortOrder
    id_recommen?: SortOrder
  }

  export type feedback_questionMaxOrderByAggregateInput = {
    id_feedback_q?: SortOrder
    question_feedback?: SortOrder
    question_rate?: SortOrder
    id_recommen?: SortOrder
  }

  export type feedback_questionMinOrderByAggregateInput = {
    id_feedback_q?: SortOrder
    question_feedback?: SortOrder
    question_rate?: SortOrder
    id_recommen?: SortOrder
  }

  export type feedback_questionSumOrderByAggregateInput = {
    id_feedback_q?: SortOrder
    question_rate?: SortOrder
    id_recommen?: SortOrder
  }

  export type mgroupCountOrderByAggregateInput = {
    id_group?: SortOrder
    group_name?: SortOrder
    group_description?: SortOrder
    image?: SortOrder
  }

  export type mgroupAvgOrderByAggregateInput = {
    id_group?: SortOrder
  }

  export type mgroupMaxOrderByAggregateInput = {
    id_group?: SortOrder
    group_name?: SortOrder
    group_description?: SortOrder
    image?: SortOrder
  }

  export type mgroupMinOrderByAggregateInput = {
    id_group?: SortOrder
    group_name?: SortOrder
    group_description?: SortOrder
    image?: SortOrder
  }

  export type mgroupSumOrderByAggregateInput = {
    id_group?: SortOrder
  }

  export type questionnaireCountOrderByAggregateInput = {
    id_question?: SortOrder
    question_topic?: SortOrder
  }

  export type questionnaireAvgOrderByAggregateInput = {
    id_question?: SortOrder
  }

  export type questionnaireMaxOrderByAggregateInput = {
    id_question?: SortOrder
    question_topic?: SortOrder
  }

  export type questionnaireMinOrderByAggregateInput = {
    id_question?: SortOrder
    question_topic?: SortOrder
  }

  export type questionnaireSumOrderByAggregateInput = {
    id_question?: SortOrder
  }

  export type recommendationCountOrderByAggregateInput = {
    id_recommen?: SortOrder
    id_group?: SortOrder
    id_users?: SortOrder
  }

  export type recommendationAvgOrderByAggregateInput = {
    id_recommen?: SortOrder
    id_group?: SortOrder
    id_users?: SortOrder
  }

  export type recommendationMaxOrderByAggregateInput = {
    id_recommen?: SortOrder
    id_group?: SortOrder
    id_users?: SortOrder
  }

  export type recommendationMinOrderByAggregateInput = {
    id_recommen?: SortOrder
    id_group?: SortOrder
    id_users?: SortOrder
  }

  export type recommendationSumOrderByAggregateInput = {
    id_recommen?: SortOrder
    id_group?: SortOrder
    id_users?: SortOrder
  }

  export type responsesCountOrderByAggregateInput = {
    id_responses?: SortOrder
    id_users?: SortOrder
    id_choice?: SortOrder
  }

  export type responsesAvgOrderByAggregateInput = {
    id_responses?: SortOrder
    id_users?: SortOrder
    id_choice?: SortOrder
  }

  export type responsesMaxOrderByAggregateInput = {
    id_responses?: SortOrder
    id_users?: SortOrder
    id_choice?: SortOrder
  }

  export type responsesMinOrderByAggregateInput = {
    id_responses?: SortOrder
    id_users?: SortOrder
    id_choice?: SortOrder
  }

  export type responsesSumOrderByAggregateInput = {
    id_responses?: SortOrder
    id_users?: SortOrder
    id_choice?: SortOrder
  }

  export type tripCountOrderByAggregateInput = {
    id_trip?: SortOrder
    trip_name?: SortOrder
    trip_description?: SortOrder
    id_group?: SortOrder
  }

  export type tripAvgOrderByAggregateInput = {
    id_trip?: SortOrder
    id_group?: SortOrder
  }

  export type tripMaxOrderByAggregateInput = {
    id_trip?: SortOrder
    trip_name?: SortOrder
    trip_description?: SortOrder
    id_group?: SortOrder
  }

  export type tripMinOrderByAggregateInput = {
    id_trip?: SortOrder
    trip_name?: SortOrder
    trip_description?: SortOrder
    id_group?: SortOrder
  }

  export type tripSumOrderByAggregateInput = {
    id_trip?: SortOrder
    id_group?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use usersDefaultArgs instead
     */
    export type usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = usersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use choiceDefaultArgs instead
     */
    export type choiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = choiceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use feedback_questionDefaultArgs instead
     */
    export type feedback_questionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = feedback_questionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use mgroupDefaultArgs instead
     */
    export type mgroupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = mgroupDefaultArgs<ExtArgs>
    /**
     * @deprecated Use questionnaireDefaultArgs instead
     */
    export type questionnaireArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = questionnaireDefaultArgs<ExtArgs>
    /**
     * @deprecated Use recommendationDefaultArgs instead
     */
    export type recommendationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = recommendationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use responsesDefaultArgs instead
     */
    export type responsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = responsesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use tripDefaultArgs instead
     */
    export type tripArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = tripDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}